/*******************************************************************************
 * Copyright (c) 2019, 2021 IBM Corp. and others
 *
 * This program and the accompanying materials are made available under
 * the terms of the Eclipse Public License 2.0 which accompanies this
 * distribution and is available at https://www.eclipse.org/legal/epl-2.0/
 * or the Apache License, Version 2.0 which accompanies this distribution and
 * is available at https://www.apache.org/licenses/LICENSE-2.0.
 *
 * This Source Code may also be made available under the following
 * Secondary Licenses when the conditions for such availability set
 * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU
 * General Public License, version 2 with the GNU Classpath
 * Exception [1] and GNU General Public License, version 2 with the
 * OpenJDK Assembly Exception [2].
 *
 * [1] https://www.gnu.org/software/classpath/license.html
 * [2] http://openjdk.java.net/legal/assembly-exception.html
 *
 * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception
 *******************************************************************************/

#include "j9cfg.h"
#include "jilconsts.inc"

#define J9VMTHREAD x19
#define J9SP x20

	.globl	_interpreterUnresolvedStaticGlue
	.globl	_interpreterUnresolvedSpecialGlue
	.globl	_interpreterUnresolvedDirectVirtualGlue
	.globl	_interpreterUnresolvedClassGlue
	.globl	_interpreterUnresolvedClassGlue2
	.globl	_interpreterUnresolvedStringGlue
	.globl	_interpreterUnresolvedMethodTypeGlue
	.globl	_interpreterUnresolvedMethodHandleGlue
	.globl	_interpreterUnresolvedCallSiteTableEntryGlue
	.globl	_interpreterUnresolvedMethodTypeTableEntryGlue
	.globl	_interpreterUnresolvedStaticDataGlue
	.globl	_interpreterUnresolvedStaticDataStoreGlue
	.globl	_interpreterUnresolvedInstanceDataGlue
	.globl	_interpreterUnresolvedInstanceDataStoreGlue
	.globl	_interpreterUnresolvedConstantDynamicGlue
	.globl	_virtualUnresolvedHelper
	.globl	_interfaceCallHelper
	.globl	_interpreterVoidStaticGlue
	.globl	_interpreterSyncVoidStaticGlue
	.globl	_interpreterIntStaticGlue
	.globl	_interpreterSyncIntStaticGlue
	.globl	_interpreterLongStaticGlue
	.globl	_interpreterSyncLongStaticGlue
	.globl	_interpreterFloatStaticGlue
	.globl	_interpreterSyncFloatStaticGlue
	.globl	_interpreterDoubleStaticGlue
	.globl	_interpreterSyncDoubleStaticGlue
	.globl	_nativeStaticHelper
	.globl	_interfaceDispatch

	.extern	jitResolveClass
	.extern	jitResolveClassFromStaticField
	.extern	jitResolveString
	.extern	jitResolveMethodType
	.extern	jitResolveMethodHandle
	.extern	jitResolveInvokeDynamic
	.extern	jitResolveHandleMethod
	.extern	jitResolveStaticField
	.extern	jitResolveStaticFieldSetter
	.extern	jitResolveField
	.extern	jitResolveFieldSetter
	.extern	jitResolveConstantDynamic
	.extern	jitResolveVirtualMethod
	.extern	jitResolveInterfaceMethod
	.extern	jitLookupInterfaceMethod
	.extern	jitCallCFunction
	.extern	jitInstanceOf
	.extern	jitThrowException
	.extern	mcc_reservationAdjustment_unwrapper
	.extern	mcc_callPointPatching_unwrapper
	.extern	mcc_lookupHelperTrampoline_unwrapper
	.extern	flushICache

#define SETVAL(A,B) .set A, B
#include "runtime/Helpers.inc"
#undef SETVAL

	.set	clinit_bit,	1
	.set	clinit_bit_number,	0

// BL to PicBuilder from every snippet is always the instruction previous to LR

	.set	J9TR_Snippet_CallInstruction,	-4

// Static/special call snippet (and additional fields for unresolved snippet)

	.set	J9TR_SCSnippet_codeCacheReturnAddress,	0
	.set	J9TR_SCSnippet_method,		8
	.set	J9TR_SCSnippet_lock,		16
	.set	J9TR_USCSnippet_CP,		20
	.set	J9TR_USCSnippet_CPIndex,	28

// Encoding of CPIndex field in USC snippet (helperOffset: 8 bits, cpIndex: 56 bits)

	.set	J9TR_USCSnippet_HelperOffset,	0xFF00000000000000
	.set	J9TR_USCSnippet_HelperOffsetShift,	56

// Interface call snippet

	.set	J9TR_ICSnippet_codeCacheReturnAddress,	0
	.set	J9TR_UICSnippet_CP,		8
	.set	J9TR_UICSnippet_CPIndex,	16
	.set	J9TR_ICSnippet_InterfaceClass,	24
	.set	J9TR_ICSnippet_ITableIndex,	32
	.set	J9TR_ICSnippet_J2IThunk,	40

// Unresolved virtual call snippet

	.set	J9TR_UVCSnippet_codeCacheReturnAddress,	0
	.set	J9TR_UVCSnippet_CP,		8
	.set	J9TR_UVCSnippet_CPIndex,	16
	.set	J9TR_UVCSnippet_method,		24
	.set	J9TR_UVCSnippet_J2IThunk,	32
	.set	J9TR_UVCSnippet_lockword,	40

// Unresolved data snippet

	.set	J9TR_UDSnippet_codeCacheReturnAddress,	0
	.set	J9TR_UDSnippet_CPIndex,		8
	.set	J9TR_UDSnippet_CP,		16
	.set	J9TR_UDSnippet_offset,		24
	.set	J9TR_UDSnippet_template,	28

	.text
	.align 2


#if defined(OMR_GC_COMPRESSED_POINTERS)
#if defined(OMR_GC_FULL_POINTERS)
#define LOAD_CLASS(dest64, dest32, src) \
	ldr	dest64, [x19, J9TR_VMThreadCompressObjectReferences] ; \
	cmp	dest64, 0 ; \
	ldr	dest32, [src, J9TR_J9Object_class] ; \
	bne	8 ; \
	ldr	dest64, [src, J9TR_J9Object_class]
#else /* OMR_GC_FULL_POINTERS */
#define LOAD_CLASS(dest64, dest32, src)	ldr	dest32, [src, J9TR_J9Object_class]
#endif /* OMR_GC_FULL_POINTERS */
#else /* OMR_GC_COMPRESSED_POINTERS */
#define LOAD_CLASS(dest64, dest32, src)	ldr	dest64, [src, J9TR_J9Object_class]
#endif /* OMR_GC_COMPRESSED_POINTERS */

// Rewrite the distance of the specified branch instruction (BL or unconditional B)
//
// in:     x0  = address of branch instruction
//         x1  = target of branch
//         x2  = helper Index
//         x30 = return address
//
// trash:	x3, x4

L_refreshHelper:
	sub	x3, x1, x0			// distance = (target - callSite)
	sbfx	x4, x3, #0, #28
	cmp	x3, x4
	bne	L_outOfRange			// distance is out of +/-128MB range

L_rewriteBranch:
	sub	x3, x1, x0			// distance = (target - callSite)
	ldr	w2, [x0]			// fetch branch instruction
	ubfx	x1, x3, #2, #26			// distance >> 2, masking out sign bits
	and	w2, w2, #0xFC000000		// mask out branch distance
	orr	w2, w2, w1			// embed distance
	str	w2, [x0]			// rewrite branch instruction
	mov	x1, #4				// 1 instruction to flush
	b	flushICache

// Get a new (reachable) target address for calling the helper via trampoline
L_outOfRange:
	sub	J9SP, J9SP, #32
	stp	x0, x30, [J9SP, #16]		// save registers
	stp	x0, x2, [J9SP]			// push call site addr (x0) and helper index (x2)
	ldr	x0, const_mcc_lookupHelperTrampoline_unwrapper
	mov	x1, J9SP			// addr of the first arg for mcc_lookupHelperTrampoline_unwrapper
	mov	x2, J9SP			// addr of the return value from mcc_lookupHelperTrampoline_unwrapper
	bl	jitCallCFunction
	ldr	x1, [J9SP]
	ldp	x0, x30, [J9SP, #16]		// restore registers
	add	J9SP, J9SP, #32
	b	L_rewriteBranch

	.align	3
const_mcc_lookupHelperTrampoline_unwrapper:
	.dword	mcc_lookupHelperTrampoline_unwrapper

// Static glue target table is laid out as:
//
// 00: 5 helpers
// 40: 5 sync helpers

	.set	J9TR_staticGlueTableSyncOffset,	40

__staticGlueTable:
	.dword	_interpreterVoidStaticGlue
	.dword	_interpreterIntStaticGlue
	.dword	_interpreterLongStaticGlue
	.dword	_interpreterFloatStaticGlue
	.dword	_interpreterDoubleStaticGlue
	.dword	_interpreterSyncVoidStaticGlue
	.dword	_interpreterSyncIntStaticGlue
	.dword	_interpreterSyncLongStaticGlue
	.dword	_interpreterSyncFloatStaticGlue
	.dword	_interpreterSyncDoubleStaticGlue

// Handles calls to unresolved call snippets
//
// in:     x3  = address of resolve helper function
//         x30 = snippet
//
// trash:	x10, x11, x12

L_mergedUnresolvedSpecialStaticGlue:
	mov	x10, x30					// save snippet address
	ldr	x0, [x10, #J9TR_SCSnippet_codeCacheReturnAddress]	// Fetch code cache EIP
	ldr	x1, [x10, #J9TR_USCSnippet_CP]			// get CP
	ldr	x11, [x10, #J9TR_USCSnippet_CPIndex]		// get CP index & flags
	and	x2, x11, #~(J9TR_USCSnippet_HelperOffset)	// remove helper offset from CP index
	blr	x3						// call resolve helper
	str	x0, [x10, #J9TR_SCSnippet_method]		// update snippet with resolved method
	and	x0, x0, #(~clinit_bit)				// clear the clinit bit in the returned address
	mov	x2, x0						// save method (x0 trashed by following call)
	bl	jitMethodIsNative				// is the method native?
	cbz	x0, L_notNative
	ldr	x1, const_nativeStaticHelper			// if so, use nativeStaticHelper
	mov	x2, #TR_ARM64nativeStaticHelper
	b	L_gotHelper					// and skip to writing the address into the instruction
L_notNative:
	ldr	x3, const_staticGlueTable			// get helper table address
	lsr	x1, x11, #J9TR_USCSnippet_HelperOffsetShift	// get helper offset
	mov	x0, x2						// recover method
	bl	jitMethodIsSync					// is method synchronized?
	lsr	x2, x11, #(J9TR_USCSnippet_HelperOffsetShift+2)	// save helper offset for refreshHelper
	cbz	x0, L_notSync
	add	x1, x1, #J9TR_staticGlueTableSyncOffset		// if so, adjust helper offset
	add	x2, x2, #1
L_notSync:
	add	x2, x2, #TR_ARM64interpreterVoidStaticGlue
	ldr	x1, [x3, x1]					// fetch static glue helper from table
L_gotHelper:
	ldr	x0, [x10, #J9TR_SCSnippet_codeCacheReturnAddress]	// Fetch code cache EIP
	ldr	x3, [x10, #J9TR_SCSnippet_method]
	tbnz	x3, #clinit_bit_number, L_USSGclinitCase	// branch if the LSB (the "clinit" bit) was set in the resolved address
	ldr	x11, [x10, #J9TR_USCSnippet_CP]			// get CP
	ldr	x12, [x10, #J9TR_USCSnippet_CPIndex]		// get CP index & flags
	and	x12, x12, #(~J9TR_USCSnippet_HelperOffset)	// remove helper offset from CP index
	stp	x1, x2, [J9SP, #-16]!				// save regs
	str	x12, [J9SP, #-8]!				// push:	CP index
	str	x11, [J9SP, #-8]!				// 		CP
	str	x3, [J9SP, #-8]!				// 		method
	str	x0, [J9SP, #-8]!				//
								// prepare args for jitCallCFunction:
	ldr	x0, const_mcc_reservationAdjustment_unwrapper
	mov	x1, J9SP
	mov	x2, J9SP
	bl	jitCallCFunction
	add	J9SP, J9SP, #32					// restore J9SP
	ldp	x1, x2, [J9SP], #16				// restore regs
	add	x0, x10, #J9TR_Snippet_CallInstruction		// get address of BL instruction in snippet
	mov	x30, x0						// execute the BL after rewriting it
	b	L_refreshHelper					// update branch instruction to new target
L_USSGclinitCase:
	mov	x30, x10					// send helpers expect link register to contain snippet return address
	br	x1						// in <clinit> case, dispatch method directly without patching

	.align	3
const_mcc_reservationAdjustment_unwrapper:
	.dword	mcc_reservationAdjustment_unwrapper
const_staticGlueTable:
	.dword	__staticGlueTable
const_nativeStaticHelper:
	.dword	_nativeStaticHelper

_interpreterUnresolvedStaticGlue:
	ldr	x3, const_jitResolveStaticMethod
	b	L_mergedUnresolvedSpecialStaticGlue

_interpreterUnresolvedSpecialGlue:
	ldr	x3, const_jitResolveSpecialMethod
	b	L_mergedUnresolvedSpecialStaticGlue

_interpreterUnresolvedDirectVirtualGlue:
	ldr	x3, const_jitResolveSpecialMethod
	b	L_mergedUnresolvedSpecialStaticGlue

	.align	3
const_jitResolveStaticMethod:
	.dword	jitResolveStaticMethod
const_jitResolveSpecialMethod:
	.dword	jitResolveSpecialMethod

// Handles calls to unresolved data snippets
//
// in:		x3 = resolve helper address
//		x30 = snippet data
// trash:	x10, x11

// mainline:
//    b    UnresolvedDataSnippet ; change this to "movz extraReg, #0"
//    movk extraReg, #0, LSL #16
//    movk extraReg, #0, LSL #32
//    movk extraReg, #0, LSL #48
//
L_mergedDataResolve:
	ldr	x0, [x30, #J9TR_UDSnippet_CP]			// load CP
	ldr	w1, [x30, #J9TR_UDSnippet_CPIndex]		// load CP index
	ldr	x10, [x30, #J9TR_UDSnippet_codeCacheReturnAddress]	// load code cache RA
	mov	x11, x30					// protect LR
	add	x2, x10, #1					// increment for EX search
	blr	x3						// call helper
	tbnz	x0, #clinit_bit_number, L_UDclinitCase		// branch if the LSB (the "clinit" bit) was set in the resolved address
	ldrsw	x6, [x11, #J9TR_UDSnippet_offset]		// load offset
	add	x3, x0, x6					// add in offset to return value
	ldr	w1, [x10, #4]					// fetch the first movk instruction
	ubfx	x2, x3, #16, #16				// bits 16-31 of the address
	orr	w1, w1, w2, LSL #5				// encode the address in the movk instruction
	str	w1, [x10, #4]					// store the movk instruction
	ldr	w1, [x10, #8]					// fetch the second movk instruction
	ubfx	x2, x3, #32, #16				// bits 32-47 of the address
	orr	w1, w1, w2, LSL #5				// encode the address in the movk instruction
	str	w1, [x10, #8]					// store the movk instruction
	ldr	w1, [x10, #12]					// fetch the third movk instruction
	ubfx	x2, x3, #48, #16				// bits 48-63 of the address
	orr	w1, w1, w2, LSL #5				// encode the address in the movk instruction
	str	w1, [x10, #12]					// store the movk instruction
	ldr	w11, [x11, #J9TR_UDSnippet_template]		// load instruction template (movz)
	ubfx	x2, x3, #0, #16					// bits 0-15 of the address
	orr	w11, w11, w2, LSL #5				// encode the address in the movz instruction
	add	x0, x10, 4					// address of the first movk instruction
	mov	x1, #12						// 3 instructions to flush
	bl	flushICache					// flush movk instructions
	mov	x0, x10						// address of the b instruction
	str	w11, [x0]					// store the movz instruction
	mov	x1, #4						// 1 instruction to flush
	bl	flushICache					// flush movz instruction
	mov	x30, x10					// return address
	ldp	x0, x1, [J9SP, #0]				// restore regs
	ldp	x2, x3, [J9SP, #16]
	ldp	x4, x5, [J9SP, #32]
	ldp	x6, x7, [J9SP, #48]
	ldp	x8, x9, [J9SP, #64]
	ldp	x10, x11, [J9SP, #80]
	ldp	x12, x13, [J9SP, #96]
	ldp	x14, x15, [J9SP, #112]
	ldp	x16, x17, [J9SP, #128]
	ldp	x18, x19, [J9SP, #144]
	ldr	x21, [J9SP, #168]				// not restoring J9SP
	ldp	x22, x23, [J9SP, #176]
	ldp	x24, x25, [J9SP, #192]
	ldp	x26, x27, [J9SP, #208]
	ldr	x28, [J9SP, #224]
	add	J9SP, J9SP, #232
	ret							// jump back to newly-written instruction sequence

L_UDclinitCase:
	and	x0, x0, #(~clinit_bit)				// clear the "clinit" bit
	ldr	w2, [x11, #J9TR_UDSnippet_template]		// load instruction template (movz)
	ubfx	x2, x2, #0, #5					// destination register number
	ldrsw	x1, [x11, #J9TR_UDSnippet_offset]		// load offset
	add	x0, x0, x1					// add the offset
	str	x0, [J9SP, x2, LSL #3]				// store the resolved address
	add	x30, x10, #16					// return address (skip movz/movk instructions)
	ldp	x0, x1, [J9SP, #0]				// restore regs
	ldp	x2, x3, [J9SP, #16]
	ldp	x4, x5, [J9SP, #32]
	ldp	x6, x7, [J9SP, #48]
	ldp	x8, x9, [J9SP, #64]
	ldp	x10, x11, [J9SP, #80]
	ldp	x12, x13, [J9SP, #96]
	ldp	x14, x15, [J9SP, #112]
	ldp	x16, x17, [J9SP, #128]
	ldp	x18, x19, [J9SP, #144]
	ldr	x21, [J9SP, #168] // not restoring J9SP
	ldp	x22, x23, [J9SP, #176]
	ldp	x24, x25, [J9SP, #192]
	ldp	x26, x27, [J9SP, #208]
	ldr	x28, [J9SP, #224]
	add	J9SP, J9SP, #232
	ret

_interpreterUnresolvedClassGlue:
	stp	x0, x1, [J9SP, #-232]!				// save regs
	stp	x2, x3, [J9SP, #16]
	stp	x4, x5, [J9SP, #32]
	stp	x6, x7, [J9SP, #48]
	stp	x8, x9, [J9SP, #64]
	stp	x10, x11, [J9SP, #80]
	stp	x12, x13, [J9SP, #96]
	stp	x14, x15, [J9SP, #112]
	stp	x16, x17, [J9SP, #128]
	stp	x18, x19, [J9SP, #144]
	stp	x20, x21, [J9SP, #160]
	stp	x22, x23, [J9SP, #176]
	stp	x24, x25, [J9SP, #192]
	stp	x26, x27, [J9SP, #208]
	str	x28, [J9SP, #224]
	ldr	x3, const_jitResolveClass			// load resolve helper address
	b	L_mergedDataResolve

_interpreterUnresolvedClassGlue2:
	stp	x0, x1, [J9SP, #-232]!				// save regs
	stp	x2, x3, [J9SP, #16]
	stp	x4, x5, [J9SP, #32]
	stp	x6, x7, [J9SP, #48]
	stp	x8, x9, [J9SP, #64]
	stp	x10, x11, [J9SP, #80]
	stp	x12, x13, [J9SP, #96]
	stp	x14, x15, [J9SP, #112]
	stp	x16, x17, [J9SP, #128]
	stp	x18, x19, [J9SP, #144]
	stp	x20, x21, [J9SP, #160]
	stp	x22, x23, [J9SP, #176]
	stp	x24, x25, [J9SP, #192]
	stp	x26, x27, [J9SP, #208]
	str	x28, [J9SP, #224]
	ldr	x3, const_jitResolveClassFromStaticField	// load resolve helper address
	b	L_mergedDataResolve

_interpreterUnresolvedStringGlue:
	stp	x0, x1, [J9SP, #-232]!				// save regs
	stp	x2, x3, [J9SP, #16]
	stp	x4, x5, [J9SP, #32]
	stp	x6, x7, [J9SP, #48]
	stp	x8, x9, [J9SP, #64]
	stp	x10, x11, [J9SP, #80]
	stp	x12, x13, [J9SP, #96]
	stp	x14, x15, [J9SP, #112]
	stp	x16, x17, [J9SP, #128]
	stp	x18, x19, [J9SP, #144]
	stp	x20, x21, [J9SP, #160]
	stp	x22, x23, [J9SP, #176]
	stp	x24, x25, [J9SP, #192]
	stp	x26, x27, [J9SP, #208]
	str	x28, [J9SP, #224]
	ldr	x3, const_jitResolveString			// load resolve helper address
	b	L_mergedDataResolve

_interpreterUnresolvedMethodTypeGlue:
	stp	x0, x1, [J9SP, #-232]!				// save regs
	stp	x2, x3, [J9SP, #16]
	stp	x4, x5, [J9SP, #32]
	stp	x6, x7, [J9SP, #48]
	stp	x8, x9, [J9SP, #64]
	stp	x10, x11, [J9SP, #80]
	stp	x12, x13, [J9SP, #96]
	stp	x14, x15, [J9SP, #112]
	stp	x16, x17, [J9SP, #128]
	stp	x18, x19, [J9SP, #144]
	stp	x20, x21, [J9SP, #160]
	stp	x22, x23, [J9SP, #176]
	stp	x24, x25, [J9SP, #192]
	stp	x26, x27, [J9SP, #208]
	str	x28, [J9SP, #224]
	ldr	x3, const_jitResolveMethodType			// load resolve helper address
	b	L_mergedDataResolve

_interpreterUnresolvedMethodHandleGlue:
	stp	x0, x1, [J9SP, #-232]!				// save regs
	stp	x2, x3, [J9SP, #16]
	stp	x4, x5, [J9SP, #32]
	stp	x6, x7, [J9SP, #48]
	stp	x8, x9, [J9SP, #64]
	stp	x10, x11, [J9SP, #80]
	stp	x12, x13, [J9SP, #96]
	stp	x14, x15, [J9SP, #112]
	stp	x16, x17, [J9SP, #128]
	stp	x18, x19, [J9SP, #144]
	stp	x20, x21, [J9SP, #160]
	stp	x22, x23, [J9SP, #176]
	stp	x24, x25, [J9SP, #192]
	stp	x26, x27, [J9SP, #208]
	str	x28, [J9SP, #224]
	ldr	x3, const_jitResolveMethodHandle		// load resolve helper address
	b	L_mergedDataResolve

_interpreterUnresolvedCallSiteTableEntryGlue:
	stp	x0, x1, [J9SP, #-232]!				// save regs
	stp	x2, x3, [J9SP, #16]
	stp	x4, x5, [J9SP, #32]
	stp	x6, x7, [J9SP, #48]
	stp	x8, x9, [J9SP, #64]
	stp	x10, x11, [J9SP, #80]
	stp	x12, x13, [J9SP, #96]
	stp	x14, x15, [J9SP, #112]
	stp	x16, x17, [J9SP, #128]
	stp	x18, x19, [J9SP, #144]
	stp	x20, x21, [J9SP, #160]
	stp	x22, x23, [J9SP, #176]
	stp	x24, x25, [J9SP, #192]
	stp	x26, x27, [J9SP, #208]
	str	x28, [J9SP, #224]
	ldr	x3, const_jitResolveInvokeDynamic		// load resolve helper address
	b	L_mergedDataResolve

_interpreterUnresolvedMethodTypeTableEntryGlue:
	stp	x0, x1, [J9SP, #-232]!				// save regs
	stp	x2, x3, [J9SP, #16]
	stp	x4, x5, [J9SP, #32]
	stp	x6, x7, [J9SP, #48]
	stp	x8, x9, [J9SP, #64]
	stp	x10, x11, [J9SP, #80]
	stp	x12, x13, [J9SP, #96]
	stp	x14, x15, [J9SP, #112]
	stp	x16, x17, [J9SP, #128]
	stp	x18, x19, [J9SP, #144]
	stp	x20, x21, [J9SP, #160]
	stp	x22, x23, [J9SP, #176]
	stp	x24, x25, [J9SP, #192]
	stp	x26, x27, [J9SP, #208]
	str	x28, [J9SP, #224]
	ldr	x3, const_jitResolveHandleMethod		// load resolve helper address
	b	L_mergedDataResolve

_interpreterUnresolvedStaticDataGlue:
	stp	x0, x1, [J9SP, #-232]!				// save regs
	stp	x2, x3, [J9SP, #16]
	stp	x4, x5, [J9SP, #32]
	stp	x6, x7, [J9SP, #48]
	stp	x8, x9, [J9SP, #64]
	stp	x10, x11, [J9SP, #80]
	stp	x12, x13, [J9SP, #96]
	stp	x14, x15, [J9SP, #112]
	stp	x16, x17, [J9SP, #128]
	stp	x18, x19, [J9SP, #144]
	stp	x20, x21, [J9SP, #160]
	stp	x22, x23, [J9SP, #176]
	stp	x24, x25, [J9SP, #192]
	stp	x26, x27, [J9SP, #208]
	str	x28, [J9SP, #224]
	ldr	x3, const_jitResolveStaticField			// load resolve helper address
	b	L_mergedDataResolve

_interpreterUnresolvedStaticDataStoreGlue:
	stp	x0, x1, [J9SP, #-232]!				// save regs
	stp	x2, x3, [J9SP, #16]
	stp	x4, x5, [J9SP, #32]
	stp	x6, x7, [J9SP, #48]
	stp	x8, x9, [J9SP, #64]
	stp	x10, x11, [J9SP, #80]
	stp	x12, x13, [J9SP, #96]
	stp	x14, x15, [J9SP, #112]
	stp	x16, x17, [J9SP, #128]
	stp	x18, x19, [J9SP, #144]
	stp	x20, x21, [J9SP, #160]
	stp	x22, x23, [J9SP, #176]
	stp	x24, x25, [J9SP, #192]
	stp	x26, x27, [J9SP, #208]
	str	x28, [J9SP, #224]
	ldr	x3, const_jitResolveStaticFieldSetter		// load resolve helper address
	b	L_mergedDataResolve

_interpreterUnresolvedInstanceDataGlue:
	stp	x0, x1, [J9SP, #-232]!				// save regs
	stp	x2, x3, [J9SP, #16]
	stp	x4, x5, [J9SP, #32]
	stp	x6, x7, [J9SP, #48]
	stp	x8, x9, [J9SP, #64]
	stp	x10, x11, [J9SP, #80]
	stp	x12, x13, [J9SP, #96]
	stp	x14, x15, [J9SP, #112]
	stp	x16, x17, [J9SP, #128]
	stp	x18, x19, [J9SP, #144]
	stp	x20, x21, [J9SP, #160]
	stp	x22, x23, [J9SP, #176]
	stp	x24, x25, [J9SP, #192]
	stp	x26, x27, [J9SP, #208]
	str	x28, [J9SP, #224]
	ldr	x3, const_jitResolveField			// load resolve helper address
	b	L_mergedDataResolve

_interpreterUnresolvedInstanceDataStoreGlue:
	stp	x0, x1, [J9SP, #-232]!				// save regs
	stp	x2, x3, [J9SP, #16]
	stp	x4, x5, [J9SP, #32]
	stp	x6, x7, [J9SP, #48]
	stp	x8, x9, [J9SP, #64]
	stp	x10, x11, [J9SP, #80]
	stp	x12, x13, [J9SP, #96]
	stp	x14, x15, [J9SP, #112]
	stp	x16, x17, [J9SP, #128]
	stp	x18, x19, [J9SP, #144]
	stp	x20, x21, [J9SP, #160]
	stp	x22, x23, [J9SP, #176]
	stp	x24, x25, [J9SP, #192]
	stp	x26, x27, [J9SP, #208]
	str	x28, [J9SP, #224]
	ldr	x3, const_jitResolveFieldSetter			// load resolve helper address
	b	L_mergedDataResolve

_interpreterUnresolvedConstantDynamicGlue:
	stp	x0, x1, [J9SP, #-232]!				// save regs
	stp	x2, x3, [J9SP, #16]
	stp	x4, x5, [J9SP, #32]
	stp	x6, x7, [J9SP, #48]
	stp	x8, x9, [J9SP, #64]
	stp	x10, x11, [J9SP, #80]
	stp	x12, x13, [J9SP, #96]
	stp	x14, x15, [J9SP, #112]
	stp	x16, x17, [J9SP, #128]
	stp	x18, x19, [J9SP, #144]
	stp	x20, x21, [J9SP, #160]
	stp	x22, x23, [J9SP, #176]
	stp	x24, x25, [J9SP, #192]
	stp	x26, x27, [J9SP, #208]
	str	x28, [J9SP, #224]
	ldr	x3, const_jitResolveConstantDynamic		// load resolve helper address
	b	L_mergedDataResolve

	.align	3
const_jitResolveClass:
	.dword	jitResolveClass
const_jitResolveClassFromStaticField:
	.dword	jitResolveClassFromStaticField
const_jitResolveString:
	.dword	jitResolveString
const_jitResolveMethodType:
	.dword	jitResolveMethodType
const_jitResolveMethodHandle:
	.dword	jitResolveMethodHandle
const_jitResolveInvokeDynamic:
	.dword	jitResolveInvokeDynamic
const_jitResolveHandleMethod:
	.dword	jitResolveHandleMethod
const_jitResolveStaticField:
	.dword	jitResolveStaticField
const_jitResolveStaticFieldSetter:
	.dword	jitResolveStaticFieldSetter
const_jitResolveField:
	.dword	jitResolveField
const_jitResolveFieldSetter:
	.dword	jitResolveFieldSetter
const_jitResolveConstantDynamic:
	.dword	jitResolveConstantDynamic

// Handles calls to virtual unresolved call snippets
//
// in: x30 = snippet
//
// trash: x10, x11, x12

// For virtual unresolved call, we generate following instructions
//  b     VirtualUnresolvedSnippet ; change this to "movz x9, #low16bits"
//  movk  x9, #0, LSL #16
//  sxtw  x9, w9
//  ldr   x9, [vftReg, x9]
//  blr   x9
//
// We encode the resolved index value (signed 32 bits) into movz and movk instructions
//
_virtualUnresolvedHelper:
	stp	x7, x6, [J9SP, #-64]!				// save parameter regs. jitWalkResolveMethodFrame assumes that argument registers are saved in this order
	stp	x5, x4, [J9SP, #16]
	stp	x3, x2, [J9SP, #32]
	stp	x1, x0, [J9SP, #48]
	ldr	x10, [x30, #J9TR_UVCSnippet_codeCacheReturnAddress]	// get code cache RA (L_commonLookupException expects it to be in x10)
	mov	x11, x30					// protect snippet address in x11
	ldr	x0, [x30, #J9TR_UVCSnippet_method]		// Load the J9Method
	cbnz	x0, L_callPrivate				// If J9Method is not null, this is a prevously resolved private method
	add	x0, x30, #J9TR_UVCSnippet_CP			// get CP/index pair pointer
	mov	x1, x10						// code cache RA
	bl	jitResolveVirtualMethod				// resolve the method, return value = vTable offset
	cbz	x0, L_commonLookupException			// if resolve failed, throw the exception
	ands	x1, x0, #J9TR_J9_VTABLE_INDEX_DIRECT_METHOD_FLAG	// Check if result is tagged with J9TR_J9_VTABLE_INDEX_DIRECT_METHOD_FLAG
	beq	L_callVirtual					// If it is not, go to the original path
	eor	x0, x0, x1					// x1 currently equals 0x1 so this will clear the direct method flag bit
	str	x0, [x11, #J9TR_UVCSnippet_method]		// stores the J9Method for future calls to this helper
L_callPrivate:
	ldr	x1, [x0, #J9TR_MethodPCStartOffset]		// Load startPC/extra field
	tst	x1, #J9TR_MethodNotCompiledBit			// Check to see if the method has already been compiled
	bne	L_interpretedPrivate				// If not compiled, handle interpreted case
	ldr     w2, [x1, #-4]					// Load the linkage info word
	ubfx	x2, x2, #16, #16				// Extract the bits for distance to j2j entry
	add	x2, x1, x2					// j2j address of target method
	b	L_calloutPrivate
L_interpretedPrivate:
	orr	x9, x0, J9TR_J9_VTABLE_INDEX_DIRECT_METHOD_FLAG	// put tagged J9Method into x9 (for use in j2iVirtual)
	ldr	x2, [x11, #J9TR_UVCSnippet_J2IThunk]		// Load thunk address
L_calloutPrivate:
	mov	x30, x10					// Set up the return addr
	mov	x10, x2						// destination address
	ldp	x7, x6, [J9SP, #0]				// restore parameter regs
	ldp	x5, x4, [J9SP, #16]
	ldp	x3, x2, [J9SP, #32]
	ldp	x1, x0, [J9SP, #48]
	add	J9SP, J9SP, #64
	br	x10						// Call the target, not returning here
L_callVirtual:
	add	x1, x11, #J9TR_UVCSnippet_lockword		// address of the lockword
	mov	w3, #1
	ldxr	w2, [x1]
	cbnz	w2, L_spinForUpdate				// already locked by another thread
	stxr	w2, w3, [x1]					// try to lock
	cbnz	w2, L_spinForUpdate				// failed to lock
	mov	x12, x0					// resolved index
	sub	x0, x10, #16					// get the address of the movk instruction
	ldr	w1, [x0]					// fetch the movk instruction
	ubfx	x2, x12, #16, #16				// upper 16 bits of the index
	orr	w1, w1, w2, LSL #5				// encode the index in the movk instruction
	str	w1, [x0]					// store the movk instruction
	mov	x1, #4						// 1 instruction to flush
	bl	flushICache
	ldr	w1, const_movz_x9				// fetch movz template
	ubfx	x12, x12, #0, #16					// lower 16 bits of the index
	sub	x0, x10, #20					// get the address of the b instruction
	orr	w1, w1, w12, LSL #5				// encode the index in the movz instruction
	str	w1, [x0]					// store the movz instruction
	mov	x1, #4						// 1 instruction to flush
	bl	flushICache
	mov	w0, #0
	dmb	sy
	str	w0, [x11, #J9TR_UVCSnippet_lockword]		// unlock
L_calloutVirtual:
	sub	x30, x10, #20					// set the movz instruction as the destination
	ldp	x7, x6, [J9SP, #0]				// restore other parameter regs
	ldp	x5, x4, [J9SP, #16]
	ldp	x3, x2, [J9SP, #32]
	ldp	x1, x0, [J9SP, #48]
	add	J9SP, J9SP, #64
	ret							// jump back to the movz instruction

L_spinForUpdate:
	ldr	w2, [x1]
	cbnz	w2, L_spinForUpdate
	b	L_calloutVirtual				// another thread completed rewriting instructions

	.align	2
const_movz_x9:
	.word	0xD2800009					// template for "movz x9, #0"

// Handles calls to interface call snippets
//
// in:     x30 = snippet
//
// trash:	x10, x11
//
_interfaceCallHelper:
	stp	x7, x6, [J9SP, #-64]!				// save argument registers
	stp	x5, x4, [J9SP, #16]
	stp	x3, x2, [J9SP, #32]
	stp	x1, x0, [J9SP, #48]
	mov	x7, x30						// preserve LR
	ldr	x10, [x30, #J9TR_ICSnippet_codeCacheReturnAddress]	// protect code cache RA in x10 (in L_commonLookupException, it is expected)
	ldr	x0, [x30, #J9TR_ICSnippet_ITableIndex]		// Load ITable Index
	tst	x0, #J9TR_J9_ITABLE_OFFSET_DIRECT		// Check if J9TR_J9_ITABLE_OFFSET_DIRECT flag is set
	beq	L_callResolve					// If not set, need to call jitResolveInterfaceMethod
	ldr	x0, [x30, #J9TR_ICSnippet_InterfaceClass]	// Load Interface Class Pointer
	cbnz	x0, L_typeCheckAndDirectDispatch		// If it is not null, this is a known private interface call
L_callResolve:
	add	x0, x30, #J9TR_UICSnippet_CP			// get CP/index pair pointer
	mov	x1, x10						// get code cache RA
	bl	jitResolveInterfaceMethod			// call the helper
	dmb	ishst						// make sure interface class and iTable offset are visible if `bl` instruction is rewritten.
	cbz	x0, L_commonLookupException			// if resolve failed, throw the exception
	ldr	x0, [x7, #J9TR_ICSnippet_ITableIndex]		// Load ITable Index
	tst	x0, #J9TR_J9_ITABLE_OFFSET_DIRECT		// Check if J9TR_J9_ITABLE_OFFSET_DIRECT flag is set
	beq	L_callInterface					// If not set, this does not need a direct dispatch
L_typeCheckAndDirectDispatch:
	ldr	x0, [x7, #J9TR_ICSnippet_InterfaceClass]	// Load Interface Class Pointer
	ldr	x1, [J9SP, #56]					// Load 'this' pointer
	bl	jitInstanceOf
	cbnz	x0, L_directDispatchInterface			// If jitInstanceOf did not return null, continue on to direct dispatch
	ldr	x0, [J9SP, #56]					// Load 'this' pointer
	LOAD_CLASS(x2, w2, x0)					// Load class pointer
	and	x0, x2, #~(J9TR_RequiredClassAlignment-1)	// mask VFT bits
	add	x1, x7, J9TR_ICSnippet_InterfaceClass		// Address of InterfaceClass/ITableIndex pair
	mov	x2, x7						// Load original RA for use inside jitLookupInterfaceMethod
	bl	jitLookupInterfaceMethod			// Branch to jitLookupInterfaceMethod to trigger exception
								// The code will not return here after the branch.
L_directDispatchInterface:
	ldr	x0, [x7, #J9TR_ICSnippet_ITableIndex]		// Load ITable Index. This is actually a J9Method.
	eor	x0, x0, #J9TR_J9_ITABLE_OFFSET_DIRECT		// Clear J9TR_J9_ITABLE_OFFSET_DIRECT flag.
	ldr	x1, [x0, #J9TR_MethodPCStartOffset]		// load startPC/extra field
	tst	x1, J9TR_MethodNotCompiledBit			// Check to see if the method has already been compiled
	bne	L_interpretedDispatch				// If not compiled, handle interpreted case
	ldr	w11, [x1, -4]					// Load offset of JIT-to-JIT
	lsr	w11, w11, 16					// shift right to get the bits we want
	add	x11, x11, x1					// Addr of JIT-to-JIT in x11
	b	L_interfaceCallout
L_interpretedDispatch:
	orr	x9, x0, #J9TR_J9_VTABLE_INDEX_DIRECT_METHOD_FLAG	// put tagged J9Method in x9
	ldr	x11, [x7, #J9TR_ICSnippet_J2IThunk]		// put thunk addr in x11
L_interfaceCallout:
	ldr	x0, [J9SP, #56]					// Restore 'this' pointer
	mov	x30, x10						// set LR = code cache RA
	ldp	x7, x6, [J9SP, #0]				// restore other parameter regs
	ldp	x5, x4, [J9SP, #16]
	ldp	x3, x2, [J9SP, #32]
	ldr	x1, [J9SP, #48]
	add	J9SP, J9SP, #64
	br	x11						// Call: does not return here
L_callInterface:
	add	x0, x7, #J9TR_Snippet_CallInstruction		// get address of BL instruction in snippet
	ldr	x1, const_interfaceDispatch			// get new snippet branch target
	mov	x2, #TR_ARM64interfaceDispatch
	bl	L_refreshHelper					// rewrite the BL
	mov	x30, x7						// restore LR
	ldr	x0, [J9SP, #56]					// refetch 'this'
	b	L_continueInterfaceSend				// lookup interface method and send
_interfaceDispatch:
	stp	x7, x6, [J9SP, #-64]!				// save argument registers
	stp	x5, x4, [J9SP, #16]
	stp	x3, x2, [J9SP, #32]
	stp	x1, x0, [J9SP, #48]
L_continueInterfaceSend:
	LOAD_CLASS(x2, w2, x0)					// Load class pointer
	and	x0, x2, #~(J9TR_RequiredClassAlignment-1)	// mask VFT bits
	add	x1, x30, #J9TR_ICSnippet_InterfaceClass		// get InterfaceClass/ITableIndex pair pointer
	ldr	x2, [x30, #J9TR_ICSnippet_codeCacheReturnAddress]	// get code cache RA
	mov	x10, x2						// protect LR in x10 (in L_commonLookupException, it is expected)
	bl	jitLookupInterfaceMethod			// call the helper
	cbz	x0, L_commonLookupException			// if resolve failed, throw the exception
	mov	x9, #J9TR_InterpVTableOffset
	sub	x9, x9, x0					// convert interp vTableIndex to jit index (must be in x9 for patch virtual)
	mov	x30, x10					// set LR = code cache RA
	ldr	x0, [J9SP, #56]					// refetch 'this'
	LOAD_CLASS(x11, w11, x0)				// Load class pointer
	and	x11, x11, #~(J9TR_RequiredClassAlignment-1)	// mask VFT bits

	ldp	x7, x6, [J9SP, #0]				// restore other parameter regs
	ldp	x5, x4, [J9SP, #16]
	ldp	x3, x2, [J9SP, #32]
	ldr	x1, [J9SP, #48]
	add	J9SP, J9SP, #64

	ldr	x11, [x11, x9]					// jump thru vtable
	br	x11

L_commonLookupException:
	add	J9SP, J9SP, #64					// clean up stack but do not restore register values
	ldr	x0, [J9VMTHREAD, #J9TR_VMThreadCurrentException]	// load pending exception from vmStruct
	mov	x30, x10					// move correct LR in to get exception throw.
	b	jitThrowException				// throw it

	.align	3
const_interfaceDispatch:
	.dword	_interfaceDispatch

// Handles calls to static call snippets
//
// in:    x1  = ptr to snippet data
//        x30 = return address if not compiled
//
// out:   x0  = method
//        x30 = code cache return address
//
// trash: x10, x11
//
L_StaticGlueCallFixer:
	ldr	x0, [x1, #J9TR_SCSnippet_method]		// get method
	mov	x2, x30						// save static glue return address
	ldr	x30, [x1, #J9TR_SCSnippet_codeCacheReturnAddress]	// get code cache return address
	tbnz	x0, #clinit_bit_number, L_SGCclinitCase		// branch if the LSB (the "clinit" bit) was set in the resolved address
	ldr	x1, [x0, #J9TR_MethodPCStartOffset]		// get I->J start address
	tst	x1, #J9TR_MethodNotCompiledBit
	beq	L_StaticGlueCallFixer1				// is method now compiled?
	ret	x2						// if not, return to static glue to call interpreter
L_StaticGlueCallFixer1:
	ldr	x10, [x0, #J9TR_MethodPCStartOffset]		// get I->J start address
	sub	x11, x30, #4					// get address of BL instruction (code cache RA points to instruction following BL)
	str	x10, [J9SP, #-8]!				// push:	addr of the callee (MethodPCStartOffset)
	str	x11, [J9SP, #-8]!				// 		addr of BL instr
	str	x0, [J9SP, #-8]!				// 		method
								// prepare args for jitCallCFunction:
	ldr	x0, const_mcc_callPointPatching_unwrapper	// addr of mcc_callPointPatching_unwrapper
	mov	x1, J9SP					// addr of the first arg for patchCallPoint
	mov	x2, J9SP					// where to put the return value
	bl	jitCallCFunction
	add	J9SP, J9SP, #24					// restore J9SP
	add	x30, x11, #4					// set LR to code cache RA
	br	x10						// jump to the I->J start address
L_SGCclinitCase:
	and	x0, x0, #(~clinit_bit)				// clear the "clinit" bit
	ldr	x1, [x0, #J9TR_MethodPCStartOffset]		// get I->J start address
	tst	x1, #J9TR_MethodNotCompiledBit
	beq	L_SGCclinitCase1				// is method now compiled?
	ret	x2						// if not, return to static glue to call interpreter
L_SGCclinitCase1:
	br	x1						// in <clinit> case, dispatch method directly without patching
	.align	3
const_mcc_callPointPatching_unwrapper:
	.dword	mcc_callPointPatching_unwrapper

_interpreterVoidStaticGlue:
	mov	x1, x30
	bl	L_StaticGlueCallFixer
	b	icallVMprJavaSendStatic0

_interpreterSyncVoidStaticGlue:
	mov	x1, x30
	bl	L_StaticGlueCallFixer
	b	icallVMprJavaSendStaticSync0

_interpreterIntStaticGlue:
	mov	x1, x30
	bl	L_StaticGlueCallFixer
	b	icallVMprJavaSendStatic1

_interpreterSyncIntStaticGlue:
	mov	x1, x30
	bl	L_StaticGlueCallFixer
	b	icallVMprJavaSendStaticSync1

_interpreterLongStaticGlue:
	mov	x1, x30
	bl	L_StaticGlueCallFixer
	b	icallVMprJavaSendStaticJ

_interpreterSyncLongStaticGlue:
	mov	x1, x30
	bl	L_StaticGlueCallFixer
	b	icallVMprJavaSendStaticSyncJ

_interpreterFloatStaticGlue:
	mov	x1, x30
	bl	L_StaticGlueCallFixer
	b	icallVMprJavaSendStaticF

_interpreterSyncFloatStaticGlue:
	mov	x1, x30
	bl	L_StaticGlueCallFixer
	b	icallVMprJavaSendStaticSyncF

_interpreterDoubleStaticGlue:
	mov	x1, x30
	bl	L_StaticGlueCallFixer
	b	icallVMprJavaSendStaticD

_interpreterSyncDoubleStaticGlue:
	mov	x1, x30
	bl	L_StaticGlueCallFixer
	b	icallVMprJavaSendStaticSyncD

_nativeStaticHelper:
	ldr	x0, [x30, #J9TR_SCSnippet_method]		// get method
	ldr	x30, [x30, #J9TR_SCSnippet_codeCacheReturnAddress]	// get code cache return address
	and	x0, x0, #(~clinit_bit)				// clear the "<clinit>" bit
	b	icallVMprJavaSendNativeStatic			// jump to VM helper
