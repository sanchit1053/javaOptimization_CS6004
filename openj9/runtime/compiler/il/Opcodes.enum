/*******************************************************************************
 * Copyright (c) 2020, 2020 IBM Corp. and others
 *
 * This program and the accompanying materials are made available under
 * the terms of the Eclipse Public License 2.0 which accompanies this
 * distribution and is available at https://www.eclipse.org/legal/epl-2.0/
 * or the Apache License, Version 2.0 which accompanies this distribution and
 * is available at https://www.apache.org/licenses/LICENSE-2.0.
 *
 * This Source Code may also be made available under the following
 * Secondary Licenses when the conditions for such availability set
 * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU
 * General Public License, version 2 with the GNU Classpath
 * Exception [1] and GNU General Public License, version 2 with the
 * OpenJDK Assembly Exception [2].
 *
 * [1] https://www.gnu.org/software/classpath/license.html
 * [2] http://openjdk.java.net/legal/assembly-exception.html
 *
 * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception
 *******************************************************************************/

#include "il/OMROpcodes.enum"

OPCODE_MACRO(\
   /* .opcode               = */ dfconst, \
   /* .name                 = */ "dfconst", \
   /* .properties1          = */ ILProp1::LoadConst, \
   /* .properties2          = */ ILProp2::ValueNumberShare, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalFloat, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ILChildProp::NoChildren, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    load decimal float constant (Decimal32) */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ddconst, \
   /* .name                 = */ "ddconst", \
   /* .properties1          = */ ILProp1::LoadConst, \
   /* .properties2          = */ ILProp2::ValueNumberShare, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ILChildProp::NoChildren, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    load decimal double constant (Decimal64) */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ deconst, \
   /* .name                 = */ "deconst", \
   /* .properties1          = */ ILProp1::LoadConst, \
   /* .properties2          = */ ILProp2::ValueNumberShare, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalLongDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ILChildProp::NoChildren, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    load decimal long double constant (Decimal128) */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ dfload, \
   /* .name                 = */ "dfload", \
   /* .properties1          = */ ILProp1::LoadVar | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE | ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalFloat, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ILChildProp::NoChildren, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    load decimal double */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ddload, \
   /* .name                 = */ "ddload", \
   /* .properties1          = */ ILProp1::LoadVar | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE | ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ILChildProp::NoChildren, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    load decimal double */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ deload, \
   /* .name                 = */ "deload", \
   /* .properties1          = */ ILProp1::LoadVar | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE | ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalLongDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ILChildProp::NoChildren, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    load decimal long double */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ dfloadi, \
   /* .name                 = */ "dfloadi", \
   /* .properties1          = */ ILProp1::LoadVar | ILProp1::Indirect | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE | ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalFloat, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ONE_CHILD(TR::Address), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    indirect load decimal double */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ddloadi, \
   /* .name                 = */ "ddloadi", \
   /* .properties1          = */ ILProp1::LoadVar | ILProp1::Indirect | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE | ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ONE_CHILD(TR::Address), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    indirect load decimal double */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ deloadi, \
   /* .name                 = */ "deloadi", \
   /* .properties1          = */ ILProp1::LoadVar | ILProp1::Indirect | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE | ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalLongDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ONE_CHILD(TR::Address), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    indirect load decimal long double */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ dfstore, \
   /* .name                 = */ "dfstore", \
   /* .properties1          = */ ILProp1::Store | ILProp1::TreeTop | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalFloat, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalFloat), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    store decimal float */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ddstore, \
   /* .name                 = */ "ddstore", \
   /* .properties1          = */ ILProp1::Store | ILProp1::TreeTop | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalDouble), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    store decimal double */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ destore, \
   /* .name                 = */ "destore", \
   /* .properties1          = */ ILProp1::Store | ILProp1::TreeTop | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalLongDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalLongDouble), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    store decimal long double */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ dfstorei, \
   /* .name                 = */ "dfstorei", \
   /* .properties1          = */ ILProp1::Store | ILProp1::Indirect | ILProp1::TreeTop | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalFloat, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ TWO_CHILD(TR::Address, TR::DecimalFloat), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    indirect store decimal float */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ddstorei, \
   /* .name                 = */ "ddstorei", \
   /* .properties1          = */ ILProp1::Store | ILProp1::Indirect | ILProp1::TreeTop | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ TWO_CHILD(TR::Address, TR::DecimalDouble), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    indirect store decimal double */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ destorei, \
   /* .name                 = */ "destorei", \
   /* .properties1          = */ ILProp1::Store | ILProp1::Indirect | ILProp1::TreeTop | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalLongDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ TWO_CHILD(TR::Address, TR::DecimalLongDouble), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    indirect store decimal long double */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ dfreturn, \
   /* .name                 = */ "dfreturn", \
   /* .properties1          = */ ILProp1::Return | ILProp1::TreeTop, \
   /* .properties2          = */ ILProp2::MayUseSystemStack, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalFloat, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalFloat), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    return a decimal float */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ddreturn, \
   /* .name                 = */ "ddreturn", \
   /* .properties1          = */ ILProp1::Return | ILProp1::TreeTop, \
   /* .properties2          = */ ILProp2::MayUseSystemStack, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalDouble), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    return a decimal double */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ dereturn, \
   /* .name                 = */ "dereturn", \
   /* .properties1          = */ ILProp1::Return | ILProp1::TreeTop, \
   /* .properties2          = */ ILProp2::MayUseSystemStack, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalLongDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalLongDouble), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    return a decimal long double */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ dfcall, \
   /* .name                 = */ "dfcall", \
   /* .properties1          = */ ILProp1::Call | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::CanRaiseException | ILProp2::SupportedForPRE | ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeUse | ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalFloat, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ILChildProp::Unspecified, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    direct call returning decimal float */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ddcall, \
   /* .name                 = */ "ddcall", \
   /* .properties1          = */ ILProp1::Call | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::CanRaiseException | ILProp2::SupportedForPRE | ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeUse | ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ILChildProp::Unspecified, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    direct call returning decimal double */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ decall, \
   /* .name                 = */ "decall", \
   /* .properties1          = */ ILProp1::Call | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::CanRaiseException | ILProp2::SupportedForPRE | ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeUse | ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalLongDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ILChildProp::Unspecified, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    direct call returning decimal long double */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ dfcalli, \
   /* .name                 = */ "dfcalli", \
   /* .properties1          = */ ILProp1::Indirect | ILProp1::Call | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::CanRaiseException | ILProp2::SupportedForPRE | ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeUse | ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalFloat, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ILChildProp::IndirectCallType, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    indirect call returning decimal float (child1 is addr of function) */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ddcalli, \
   /* .name                 = */ "ddcalli", \
   /* .properties1          = */ ILProp1::Indirect | ILProp1::Call | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::CanRaiseException | ILProp2::SupportedForPRE | ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeUse | ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ILChildProp::IndirectCallType, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    indirect call returning decimal double (child1 is addr of function) */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ decalli, \
   /* .name                 = */ "decalli", \
   /* .properties1          = */ ILProp1::Indirect | ILProp1::Call | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::CanRaiseException | ILProp2::SupportedForPRE | ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeUse | ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalLongDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ILChildProp::IndirectCallType, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    indirect call returning decimal long double (child1 is addr of function) */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ dfadd, \
   /* .name                 = */ "dfadd", \
   /* .properties1          = */ ILProp1::Commutative | ILProp1::Associative | ILProp1::Add, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::CanRaiseException | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalFloat, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::DecimalFloat), \
   /* .swapChildrenOpCode   = */ TR::dfadd, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    add 2 decimal doubles */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ddadd, \
   /* .name                 = */ "ddadd", \
   /* .properties1          = */ ILProp1::Commutative | ILProp1::Associative | ILProp1::Add, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::DecimalDouble), \
   /* .swapChildrenOpCode   = */ TR::ddadd, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    add 2 decimal doubles */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ deadd, \
   /* .name                 = */ "deadd", \
   /* .properties1          = */ ILProp1::Commutative | ILProp1::Associative | ILProp1::Add, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalLongDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::DecimalLongDouble), \
   /* .swapChildrenOpCode   = */ TR::deadd, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    add 2 decimal long doubles */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ dfsub, \
   /* .name                 = */ "dfsub", \
   /* .properties1          = */ ILProp1::Sub, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalFloat, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::DecimalFloat), \
   /* .swapChildrenOpCode   = */ TR::dfsub, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    subtract 2 decimal float                        (child1 - child2) */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ddsub, \
   /* .name                 = */ "ddsub", \
   /* .properties1          = */ ILProp1::Sub, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::DecimalDouble), \
   /* .swapChildrenOpCode   = */ TR::ddsub, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    subtract 2 decimal doubles                      (child1 - child2) */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ desub, \
   /* .name                 = */ "desub", \
   /* .properties1          = */ ILProp1::Sub, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalLongDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::DecimalLongDouble), \
   /* .swapChildrenOpCode   = */ TR::desub, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    subtract 2 decimal long doubles                 (child1 - child2) */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ dfmul, \
   /* .name                 = */ "dfmul", \
   /* .properties1          = */ ILProp1::Commutative | ILProp1::Associative | ILProp1::Mul, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalFloat, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::DecimalFloat), \
   /* .swapChildrenOpCode   = */ TR::dfmul, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    multiply 2 decimal float */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ddmul, \
   /* .name                 = */ "ddmul", \
   /* .properties1          = */ ILProp1::Commutative | ILProp1::Associative | ILProp1::Mul, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::DecimalDouble), \
   /* .swapChildrenOpCode   = */ TR::ddmul, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    multiply 2 decimal doubles */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ demul, \
   /* .name                 = */ "demul", \
   /* .properties1          = */ ILProp1::Commutative | ILProp1::Associative | ILProp1::Mul, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalLongDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::DecimalLongDouble), \
   /* .swapChildrenOpCode   = */ TR::demul, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    multiply 2 decimal long doubles */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ dfdiv, \
   /* .name                 = */ "dfdiv", \
   /* .properties1          = */ ILProp1::Div, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalFloat, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::DecimalFloat), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    divide 2 decimal float                          (child1 / child2) */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ dddiv, \
   /* .name                 = */ "dddiv", \
   /* .properties1          = */ ILProp1::Div, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::DecimalDouble), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    divide 2 decimal doubles                        (child1 / child2) */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ dediv, \
   /* .name                 = */ "dediv", \
   /* .properties1          = */ ILProp1::Div, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalLongDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::DecimalLongDouble), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    divide 2 decimal long doubles                   (child1 / child2) */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ dfrem, \
   /* .name                 = */ "dfrem", \
   /* .properties1          = */ ILProp1::Rem, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE | ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalFloat, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::DecimalFloat), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    remainder of 2 decimal float                    (child1 % child2) */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ddrem, \
   /* .name                 = */ "ddrem", \
   /* .properties1          = */ ILProp1::Rem, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE | ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::DecimalDouble), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    remainder of 2 decimal doubles                  (child1 % child2) */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ derem, \
   /* .name                 = */ "derem", \
   /* .properties1          = */ ILProp1::Rem, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE | ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalLongDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::DecimalLongDouble), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    remainder of 2 decimal long doubles             (child1 % child2) */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ dfneg, \
   /* .name                 = */ "dfneg", \
   /* .properties1          = */ ILProp1::Neg, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalFloat, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalFloat), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    negate a decimal float */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ddneg, \
   /* .name                 = */ "ddneg", \
   /* .properties1          = */ ILProp1::Neg, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalDouble), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    negate a decimal double */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ deneg, \
   /* .name                 = */ "deneg", \
   /* .properties1          = */ ILProp1::Neg, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalLongDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalLongDouble), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    negate a decimal long double */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ dfabs, \
   /* .name                 = */ "dfabs", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::Abs, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalFloat, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalFloat), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    absolute value of decimal float */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ddabs, \
   /* .name                 = */ "ddabs", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::Abs, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalDouble), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    absolute value of decimal double */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ deabs, \
   /* .name                 = */ "deabs", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::Abs, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalLongDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalLongDouble), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    absolute value of decimal long double */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ dfshl, \
   /* .name                 = */ "dfshl", \
   /* .properties1          = */ ILProp1::LeftShift, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalFloat, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::DecimalFloat), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    shift decimal float left */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ dfshr, \
   /* .name                 = */ "dfshr", \
   /* .properties1          = */ ILProp1::RightShift, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalFloat, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::DecimalFloat), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    shift decimal float right */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ddshl, \
   /* .name                 = */ "ddshl", \
   /* .properties1          = */ ILProp1::LeftShift, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::DecimalDouble), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    shift decimal double left */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ddshr, \
   /* .name                 = */ "ddshr", \
   /* .properties1          = */ ILProp1::RightShift, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::DecimalDouble), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    shift decimal double right */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ deshl, \
   /* .name                 = */ "deshl", \
   /* .properties1          = */ ILProp1::LeftShift, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalLongDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::DecimalLongDouble), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    shift decimal long double left */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ deshr, \
   /* .name                 = */ "deshr", \
   /* .properties1          = */ ILProp1::RightShift, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalLongDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::DecimalLongDouble), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    shift decimal long double right */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ dfshrRounded, \
   /* .name                 = */ "dfshrRounded", \
   /* .properties1          = */ ILProp1::RightShift, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalFloat, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::DecimalFloat), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    shift decimal float right with rounding */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ddshrRounded, \
   /* .name                 = */ "ddshrRounded", \
   /* .properties1          = */ ILProp1::RightShift, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::DecimalDouble), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    shift decimal float right with rounding */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ deshrRounded, \
   /* .name                 = */ "deshrRounded", \
   /* .properties1          = */ ILProp1::RightShift, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalLongDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::DecimalLongDouble), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    shift decimal float right with rounding */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ dfSetNegative, \
   /* .name                 = */ "dfSetNegative", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalFloat, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalFloat), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    set a decimal float's sign to negative */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ddSetNegative, \
   /* .name                 = */ "ddSetNegative", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalDouble), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    set a decimal double's sign to negative */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ deSetNegative, \
   /* .name                 = */ "deSetNegative", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalLongDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalLongDouble), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    set a decimal long double's sign to negative */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ dfModifyPrecision, \
   /* .name                 = */ "dfModifyPrecision", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ ILProp4::ModifyPrecision, \
   /* .dataType             = */ TR::DecimalFloat, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalFloat), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    decimal float modify precision */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ddModifyPrecision, \
   /* .name                 = */ "ddModifyPrecision", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ ILProp4::ModifyPrecision, \
   /* .dataType             = */ TR::DecimalDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalDouble), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    decimal double modify precision */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ deModifyPrecision, \
   /* .name                 = */ "deModifyPrecision", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ ILProp4::ModifyPrecision, \
   /* .dataType             = */ TR::DecimalLongDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalLongDouble), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    decimal long double modify precision */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ i2df, \
   /* .name                 = */ "i2df", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalFloat, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ONE_CHILD(TR::Int32), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert integer to decimal float */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ iu2df, \
   /* .name                 = */ "iu2df", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalFloat, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ONE_CHILD(TR::Int32), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert unsigned integer to decimal float */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ l2df, \
   /* .name                 = */ "l2df", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalFloat, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ONE_CHILD(TR::Int64), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert long integer to decimal float */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ lu2df, \
   /* .name                 = */ "lu2df", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalFloat, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ONE_CHILD(TR::Int64), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert unsigned long integer to decimal float */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ f2df, \
   /* .name                 = */ "f2df", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalFloat, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ONE_CHILD(TR::Float), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert float to decimal float */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ d2df, \
   /* .name                 = */ "d2df", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalFloat, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ONE_CHILD(TR::Double), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert double to decimal float */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ dd2df, \
   /* .name                 = */ "dd2df", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalFloat, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalDouble), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert decimal double to decimal float */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ de2df, \
   /* .name                 = */ "de2df", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalFloat, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalLongDouble), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert decimal long double to decimal float */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ b2df, \
   /* .name                 = */ "b2df", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalFloat, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ONE_CHILD(TR::Int8), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert byte to decimal float */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ bu2df, \
   /* .name                 = */ "bu2df", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalFloat, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ONE_CHILD(TR::Int8), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert unsigned byte to decimal float */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ s2df, \
   /* .name                 = */ "s2df", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalFloat, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ONE_CHILD(TR::Int16), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert short to decimal float */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ su2df, \
   /* .name                 = */ "su2df", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalFloat, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ONE_CHILD(TR::Int16), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert char to decimal float */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ df2i, \
   /* .name                 = */ "df2i", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalFloat), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert decimal float to integer */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ df2iu, \
   /* .name                 = */ "df2iu", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Unsigned, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalFloat), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert decimal float to unsigned integer */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ df2l, \
   /* .name                 = */ "df2l", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int64, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Integer, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalFloat), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert decimal float to long integer */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ df2lu, \
   /* .name                 = */ "df2lu", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int64, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Unsigned, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalFloat), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert decimal float to unsigned long integer */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ df2f, \
   /* .name                 = */ "df2f", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Float, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Floating_Point, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalFloat), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert decimal float to float */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ df2d, \
   /* .name                 = */ "df2d", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Double, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Floating_Point, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalFloat), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert decimal float to double */ \
)

OPCODE_MACRO(\
   /* .opcode               = */ df2dd, \
   /* .name                 = */ "df2dd", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalFloat), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert decimal float to decimal double */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ df2de, \
   /* .name                 = */ "df2de", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalLongDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalFloat), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert decimal float to decimal long double */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ df2b, \
   /* .name                 = */ "df2b", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int8, \
   /* .typeProperties       = */ ILTypeProp::Size_1 | ILTypeProp::Integer, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalFloat), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert decimal float to byte */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ df2bu, \
   /* .name                 = */ "df2bu", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int8, \
   /* .typeProperties       = */ ILTypeProp::Size_1 | ILTypeProp::Unsigned, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalFloat), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert decimal float to unsigned byte */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ df2s, \
   /* .name                 = */ "df2s", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int16, \
   /* .typeProperties       = */ ILTypeProp::Size_2 | ILTypeProp::Integer, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalFloat), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert decimal float to short integer */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ df2c, \
   /* .name                 = */ "df2c", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int16, \
   /* .typeProperties       = */ ILTypeProp::Size_2 | ILTypeProp::Unsigned, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalFloat), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert decimal float to char */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ i2dd, \
   /* .name                 = */ "i2dd", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ONE_CHILD(TR::Int32), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert integer to decimal double */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ iu2dd, \
   /* .name                 = */ "iu2dd", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ONE_CHILD(TR::Int32), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert unsigned integer to decimal double */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ l2dd, \
   /* .name                 = */ "l2dd", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ONE_CHILD(TR::Int64), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert long integer to decimal double */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ lu2dd, \
   /* .name                 = */ "lu2dd", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ONE_CHILD(TR::Int64), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert unsigned long integer to decimal double */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ f2dd, \
   /* .name                 = */ "f2dd", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ONE_CHILD(TR::Float), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert float to decimal double */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ d2dd, \
   /* .name                 = */ "d2dd", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ONE_CHILD(TR::Double), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert double to decimal double */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ de2dd, \
   /* .name                 = */ "de2dd", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalLongDouble), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert decimal long double to decimal double */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ b2dd, \
   /* .name                 = */ "b2dd", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ONE_CHILD(TR::Int8), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert byte to decimal double */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ bu2dd, \
   /* .name                 = */ "bu2dd", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ONE_CHILD(TR::Int8), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert unsigned byte to decimal double */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ s2dd, \
   /* .name                 = */ "s2dd", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ONE_CHILD(TR::Int16), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert short to decimal double */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ su2dd, \
   /* .name                 = */ "c2dd", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ONE_CHILD(TR::Int16), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert char to decimal double */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ dd2i, \
   /* .name                 = */ "dd2i", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalDouble), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert decimal double to integer */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ dd2iu, \
   /* .name                 = */ "dd2iu", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Unsigned, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalDouble), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert decimal double to unsigned integer */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ dd2l, \
   /* .name                 = */ "dd2l", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int64, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Integer, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalDouble), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert decimal double to long integer */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ dd2lu, \
   /* .name                 = */ "dd2lu", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int64, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Unsigned, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalDouble), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert decimal double to unsigned long integer */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ dd2f, \
   /* .name                 = */ "dd2f", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Float, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Floating_Point, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalDouble), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert decimal double to float */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ dd2d, \
   /* .name                 = */ "dd2d", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Double, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Floating_Point, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalDouble), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert decimal double to decimal float */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ dd2de, \
   /* .name                 = */ "dd2de", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalLongDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalDouble), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert decimal double to decimal long double */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ dd2b, \
   /* .name                 = */ "dd2b", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int8, \
   /* .typeProperties       = */ ILTypeProp::Size_1 | ILTypeProp::Integer, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalDouble), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert decimal double to byte */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ dd2bu, \
   /* .name                 = */ "dd2bu", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int8, \
   /* .typeProperties       = */ ILTypeProp::Size_1 | ILTypeProp::Unsigned, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalDouble), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert decimal double to unsigned byte */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ dd2s, \
   /* .name                 = */ "dd2s", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int16, \
   /* .typeProperties       = */ ILTypeProp::Size_2 | ILTypeProp::Integer, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalDouble), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert decimal double to short integer */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ dd2c, \
   /* .name                 = */ "dd2c", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int16, \
   /* .typeProperties       = */ ILTypeProp::Size_2 | ILTypeProp::Unsigned, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalDouble), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert decimal double to char */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ i2de, \
   /* .name                 = */ "i2de", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalLongDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ONE_CHILD(TR::Int32), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert integer to decimal long double */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ iu2de, \
   /* .name                 = */ "iu2de", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalLongDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ONE_CHILD(TR::Int32), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert unsigned integer to decimal long double */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ l2de, \
   /* .name                 = */ "l2de", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalLongDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ONE_CHILD(TR::Int64), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert long integer to decimal long double */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ lu2de, \
   /* .name                 = */ "lu2de", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalLongDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ONE_CHILD(TR::Int64), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert unsigned long integer to decimal long double */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ f2de, \
   /* .name                 = */ "f2de", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalLongDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ONE_CHILD(TR::Float), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert float to decimal long double */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ d2de, \
   /* .name                 = */ "d2de", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalLongDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ONE_CHILD(TR::Double), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert double to decimal long double */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ b2de, \
   /* .name                 = */ "b2de", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalLongDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ONE_CHILD(TR::Int8), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert byte to decimal long double */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ bu2de, \
   /* .name                 = */ "bu2de", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalLongDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ONE_CHILD(TR::Int8), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert unsigned byte to decimal long double */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ s2de, \
   /* .name                 = */ "s2de", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalLongDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ONE_CHILD(TR::Int16), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert short to decimal long double */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ su2de, \
   /* .name                 = */ "c2de", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalLongDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ONE_CHILD(TR::Int16), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert char to decimal long double */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ de2i, \
   /* .name                 = */ "de2i", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalLongDouble), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert decimal long double to integer */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ de2iu, \
   /* .name                 = */ "de2iu", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Unsigned, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalLongDouble), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert decimal long double to unsigned integer */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ de2l, \
   /* .name                 = */ "de2l", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int64, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Integer, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalLongDouble), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert decimal long double to long integer */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ de2lu, \
   /* .name                 = */ "de2lu", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int64, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Unsigned, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalLongDouble), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert decimal long double to unsigned long integer */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ de2f, \
   /* .name                 = */ "de2f", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Float, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Floating_Point, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalLongDouble), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert decimal long double to float */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ de2d, \
   /* .name                 = */ "de2d", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Double, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Floating_Point, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalLongDouble), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert decimal long double to decimal float */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ de2b, \
   /* .name                 = */ "de2b", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int8, \
   /* .typeProperties       = */ ILTypeProp::Size_1 | ILTypeProp::Integer, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalLongDouble), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert decimal long double to byte */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ de2bu, \
   /* .name                 = */ "de2bu", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int8, \
   /* .typeProperties       = */ ILTypeProp::Size_1 | ILTypeProp::Unsigned, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalLongDouble), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert decimal long double to unsigned byte */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ de2s, \
   /* .name                 = */ "de2s", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int16, \
   /* .typeProperties       = */ ILTypeProp::Size_2 | ILTypeProp::Integer, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalLongDouble), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert decimal long double to short integer */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ de2c, \
   /* .name                 = */ "de2c", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int16, \
   /* .typeProperties       = */ ILTypeProp::Size_2 | ILTypeProp::Unsigned, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalLongDouble), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    convert decimal long double to char */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ifdfcmpeq, \
   /* .name                 = */ "ifdfcmpeq", \
   /* .properties1          = */ ILProp1::BooleanCompare | ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::CompareTrueIfEqual, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::DecimalFloat), \
   /* .swapChildrenOpCode   = */ TR::ifdfcmpeq, \
   /* .reverseBranchOpCode  = */ TR::ifdfcmpneu, \
   /* .booleanCompareOpCode = */ TR::dfcmpeq, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    decimal float compare and branch if equal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ifdfcmpne, \
   /* .name                 = */ "ifdfcmpne", \
   /* .properties1          = */ ILProp1::BooleanCompare | ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess | ILProp3::CompareTrueIfGreater, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::DecimalFloat), \
   /* .swapChildrenOpCode   = */ TR::ifdfcmpne, \
   /* .reverseBranchOpCode  = */ TR::ifdfcmpequ, \
   /* .booleanCompareOpCode = */ TR::dfcmpne, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    decimal float compare and branch if not equal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ifdfcmplt, \
   /* .name                 = */ "ifdfcmplt", \
   /* .properties1          = */ ILProp1::BooleanCompare | ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::DecimalFloat), \
   /* .swapChildrenOpCode   = */ TR::ifdfcmpgt, \
   /* .reverseBranchOpCode  = */ TR::ifdfcmpgeu, \
   /* .booleanCompareOpCode = */ TR::dfcmplt, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    decimal float compare and branch if less than */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ifdfcmpge, \
   /* .name                 = */ "ifdfcmpge", \
   /* .properties1          = */ ILProp1::BooleanCompare | ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::CompareTrueIfGreater | ILProp3::CompareTrueIfEqual, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::DecimalFloat), \
   /* .swapChildrenOpCode   = */ TR::ifdfcmple, \
   /* .reverseBranchOpCode  = */ TR::ifdfcmpltu, \
   /* .booleanCompareOpCode = */ TR::dfcmpge, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    decimal float compare and branch if greater than or equal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ifdfcmpgt, \
   /* .name                 = */ "ifdfcmpgt", \
   /* .properties1          = */ ILProp1::BooleanCompare | ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::CompareTrueIfGreater, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::DecimalFloat), \
   /* .swapChildrenOpCode   = */ TR::ifdfcmplt, \
   /* .reverseBranchOpCode  = */ TR::ifdfcmpleu, \
   /* .booleanCompareOpCode = */ TR::dfcmpgt, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    decimal float compare and branch if greater than */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ifdfcmple, \
   /* .name                 = */ "ifdfcmple", \
   /* .properties1          = */ ILProp1::BooleanCompare | ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess | ILProp3::CompareTrueIfEqual, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::DecimalFloat), \
   /* .swapChildrenOpCode   = */ TR::ifdfcmpge, \
   /* .reverseBranchOpCode  = */ TR::ifdfcmpgtu, \
   /* .booleanCompareOpCode = */ TR::dfcmple, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    decimal float compare and branch if less than or equal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ifdfcmpequ, \
   /* .name                 = */ "ifdfcmpequ", \
   /* .properties1          = */ ILProp1::BooleanCompare | ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::CompareTrueIfEqual | ILProp3::CompareTrueIfUnordered, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::DecimalFloat), \
   /* .swapChildrenOpCode   = */ TR::ifdfcmpequ, \
   /* .reverseBranchOpCode  = */ TR::ifdfcmpne, \
   /* .booleanCompareOpCode = */ TR::dfcmpequ, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    decimal float compare and branch if equal or unordered */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ifdfcmpneu, \
   /* .name                 = */ "ifdfcmpneu", \
   /* .properties1          = */ ILProp1::BooleanCompare | ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess | ILProp3::CompareTrueIfGreater | ILProp3::CompareTrueIfUnordered, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::DecimalFloat), \
   /* .swapChildrenOpCode   = */ TR::ifdfcmpneu, \
   /* .reverseBranchOpCode  = */ TR::ifdfcmpeq, \
   /* .booleanCompareOpCode = */ TR::dfcmpneu, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    decimal float compare and branch if not equal or unordered */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ifdfcmpltu, \
   /* .name                 = */ "ifdfcmpltu", \
   /* .properties1          = */ ILProp1::BooleanCompare | ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess | ILProp3::CompareTrueIfUnordered, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::DecimalFloat), \
   /* .swapChildrenOpCode   = */ TR::ifdfcmpgtu, \
   /* .reverseBranchOpCode  = */ TR::ifdfcmpge, \
   /* .booleanCompareOpCode = */ TR::dfcmpltu, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    decimal float compare and branch if less than or unordered */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ifdfcmpgeu, \
   /* .name                 = */ "ifdfcmpgeu", \
   /* .properties1          = */ ILProp1::BooleanCompare | ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::CompareTrueIfGreater | ILProp3::CompareTrueIfEqual | ILProp3::CompareTrueIfUnordered, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::DecimalFloat), \
   /* .swapChildrenOpCode   = */ TR::ifdfcmpleu, \
   /* .reverseBranchOpCode  = */ TR::ifdfcmplt, \
   /* .booleanCompareOpCode = */ TR::dfcmpgeu, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    decimal float compare and branch if greater than or equal or unordered */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ifdfcmpgtu, \
   /* .name                 = */ "ifdfcmpgtu", \
   /* .properties1          = */ ILProp1::BooleanCompare | ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::CompareTrueIfGreater | ILProp3::CompareTrueIfUnordered, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::DecimalFloat), \
   /* .swapChildrenOpCode   = */ TR::ifdfcmpltu, \
   /* .reverseBranchOpCode  = */ TR::ifdfcmple, \
   /* .booleanCompareOpCode = */ TR::dfcmpgtu, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    decimal float compare and branch if greater than or unordered */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ifdfcmpleu, \
   /* .name                 = */ "ifdfcmpleu", \
   /* .properties1          = */ ILProp1::BooleanCompare | ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess | ILProp3::CompareTrueIfEqual | ILProp3::CompareTrueIfUnordered, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::DecimalFloat), \
   /* .swapChildrenOpCode   = */ TR::ifdfcmpgeu, \
   /* .reverseBranchOpCode  = */ TR::ifdfcmpgt, \
   /* .booleanCompareOpCode = */ TR::dfcmpleu, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    decimal float compare and branch if less than or equal or unordered */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ dfcmpeq, \
   /* .name                 = */ "dfcmpeq", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::CompareTrueIfEqual, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::DecimalFloat), \
   /* .swapChildrenOpCode   = */ TR::dfcmpeq, \
   /* .reverseBranchOpCode  = */ TR::dfcmpneu, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::ifdfcmpeq, \
   /* .description          =    decimal float compare if equal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ dfcmpne, \
   /* .name                 = */ "dfcmpne", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess | ILProp3::CompareTrueIfGreater, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::DecimalFloat), \
   /* .swapChildrenOpCode   = */ TR::dfcmpne, \
   /* .reverseBranchOpCode  = */ TR::dfcmpequ, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::ifdfcmpne, \
   /* .description          =    decimal float compare if not equal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ dfcmplt, \
   /* .name                 = */ "dfcmplt", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::DecimalFloat), \
   /* .swapChildrenOpCode   = */ TR::dfcmpgt, \
   /* .reverseBranchOpCode  = */ TR::dfcmpgeu, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::ifdfcmplt, \
   /* .description          =    decimal float compare if less than */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ dfcmpge, \
   /* .name                 = */ "dfcmpge", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::CompareTrueIfGreater | ILProp3::CompareTrueIfEqual, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::DecimalFloat), \
   /* .swapChildrenOpCode   = */ TR::dfcmple, \
   /* .reverseBranchOpCode  = */ TR::dfcmpltu, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::ifdfcmpge, \
   /* .description          =    decimal float compare if greater than or equal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ dfcmpgt, \
   /* .name                 = */ "dfcmpgt", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::CompareTrueIfGreater, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::DecimalFloat), \
   /* .swapChildrenOpCode   = */ TR::dfcmplt, \
   /* .reverseBranchOpCode  = */ TR::dfcmpleu, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::ifdfcmpgt, \
   /* .description          =    decimal float compare if greater than */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ dfcmple, \
   /* .name                 = */ "dfcmple", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess | ILProp3::CompareTrueIfEqual, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::DecimalFloat), \
   /* .swapChildrenOpCode   = */ TR::dfcmpge, \
   /* .reverseBranchOpCode  = */ TR::dfcmpgtu, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::ifdfcmple, \
   /* .description          =    decimal float compare if less than or equal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ dfcmpequ, \
   /* .name                 = */ "dfcmpequ", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::CompareTrueIfEqual | ILProp3::CompareTrueIfUnordered, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::DecimalFloat), \
   /* .swapChildrenOpCode   = */ TR::dfcmpequ, \
   /* .reverseBranchOpCode  = */ TR::dfcmpne, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::ifdfcmpequ, \
   /* .description          =    decimal float compare if equal or unordered */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ dfcmpneu, \
   /* .name                 = */ "dfcmpneu", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess | ILProp3::CompareTrueIfGreater | ILProp3::CompareTrueIfUnordered, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::DecimalFloat), \
   /* .swapChildrenOpCode   = */ TR::dfcmpneu, \
   /* .reverseBranchOpCode  = */ TR::dfcmpeq, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::ifdfcmpneu, \
   /* .description          =    decimal float compare if not equal or unordered */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ dfcmpltu, \
   /* .name                 = */ "dfcmpltu", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess | ILProp3::CompareTrueIfUnordered, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::DecimalFloat), \
   /* .swapChildrenOpCode   = */ TR::dfcmpgtu, \
   /* .reverseBranchOpCode  = */ TR::dfcmpge, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::ifdfcmpltu, \
   /* .description          =    decimal float compare if less than or unordered */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ dfcmpgeu, \
   /* .name                 = */ "dfcmpgeu", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::CompareTrueIfGreater | ILProp3::CompareTrueIfEqual | ILProp3::CompareTrueIfUnordered, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::DecimalFloat), \
   /* .swapChildrenOpCode   = */ TR::dfcmpleu, \
   /* .reverseBranchOpCode  = */ TR::dfcmplt, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::ifdfcmpgeu, \
   /* .description          =    decimal float compare if greater than or equal or unordered */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ dfcmpgtu, \
   /* .name                 = */ "dfcmpgtu", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::CompareTrueIfGreater | ILProp3::CompareTrueIfUnordered, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::DecimalFloat), \
   /* .swapChildrenOpCode   = */ TR::dfcmpltu, \
   /* .reverseBranchOpCode  = */ TR::dfcmple, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::ifdfcmpgtu, \
   /* .description          =    decimal float compare if greater than or unordered */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ dfcmpleu, \
   /* .name                 = */ "dfcmpleu", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess | ILProp3::CompareTrueIfEqual | ILProp3::CompareTrueIfUnordered, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::DecimalFloat), \
   /* .swapChildrenOpCode   = */ TR::dfcmpgeu, \
   /* .reverseBranchOpCode  = */ TR::dfcmpgt, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::ifdfcmpleu, \
   /* .description          =    decimal float compare if less than or equal or unordered */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ifddcmpeq, \
   /* .name                 = */ "ifddcmpeq", \
   /* .properties1          = */ ILProp1::BooleanCompare | ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::CompareTrueIfEqual, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::DecimalDouble), \
   /* .swapChildrenOpCode   = */ TR::ifddcmpeq, \
   /* .reverseBranchOpCode  = */ TR::ifddcmpneu, \
   /* .booleanCompareOpCode = */ TR::ddcmpeq, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    decimal double compare and branch if equal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ifddcmpne, \
   /* .name                 = */ "ifddcmpne", \
   /* .properties1          = */ ILProp1::BooleanCompare | ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess | ILProp3::CompareTrueIfGreater, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::DecimalDouble), \
   /* .swapChildrenOpCode   = */ TR::ifddcmpne, \
   /* .reverseBranchOpCode  = */ TR::ifddcmpequ, \
   /* .booleanCompareOpCode = */ TR::ddcmpne, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    decimal double compare and branch if not equal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ifddcmplt, \
   /* .name                 = */ "ifddcmplt", \
   /* .properties1          = */ ILProp1::BooleanCompare | ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::DecimalDouble), \
   /* .swapChildrenOpCode   = */ TR::ifddcmpgt, \
   /* .reverseBranchOpCode  = */ TR::ifddcmpgeu, \
   /* .booleanCompareOpCode = */ TR::ddcmplt, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    decimal double compare and branch if less than */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ifddcmpge, \
   /* .name                 = */ "ifddcmpge", \
   /* .properties1          = */ ILProp1::BooleanCompare | ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::CompareTrueIfGreater | ILProp3::CompareTrueIfEqual, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::DecimalDouble), \
   /* .swapChildrenOpCode   = */ TR::ifddcmple, \
   /* .reverseBranchOpCode  = */ TR::ifddcmpltu, \
   /* .booleanCompareOpCode = */ TR::ddcmpge, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    decimal double compare and branch if greater than or equal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ifddcmpgt, \
   /* .name                 = */ "ifddcmpgt", \
   /* .properties1          = */ ILProp1::BooleanCompare | ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::CompareTrueIfGreater, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::DecimalDouble), \
   /* .swapChildrenOpCode   = */ TR::ifddcmplt, \
   /* .reverseBranchOpCode  = */ TR::ifddcmpleu, \
   /* .booleanCompareOpCode = */ TR::ddcmpgt, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    decimal double compare and branch if greater than */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ifddcmple, \
   /* .name                 = */ "ifddcmple", \
   /* .properties1          = */ ILProp1::BooleanCompare | ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess | ILProp3::CompareTrueIfEqual, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::DecimalDouble), \
   /* .swapChildrenOpCode   = */ TR::ifddcmpge, \
   /* .reverseBranchOpCode  = */ TR::ifddcmpgtu, \
   /* .booleanCompareOpCode = */ TR::ddcmple, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    decimal double compare and branch if less than or equal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ifddcmpequ, \
   /* .name                 = */ "ifddcmpequ", \
   /* .properties1          = */ ILProp1::BooleanCompare | ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::CompareTrueIfEqual | ILProp3::CompareTrueIfUnordered, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::DecimalDouble), \
   /* .swapChildrenOpCode   = */ TR::ifddcmpequ, \
   /* .reverseBranchOpCode  = */ TR::ifddcmpne, \
   /* .booleanCompareOpCode = */ TR::ddcmpequ, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    decimal double compare and branch if equal or unordered */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ifddcmpneu, \
   /* .name                 = */ "ifddcmpneu", \
   /* .properties1          = */ ILProp1::BooleanCompare | ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess | ILProp3::CompareTrueIfGreater | ILProp3::CompareTrueIfUnordered, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::DecimalDouble), \
   /* .swapChildrenOpCode   = */ TR::ifddcmpneu, \
   /* .reverseBranchOpCode  = */ TR::ifddcmpeq, \
   /* .booleanCompareOpCode = */ TR::ddcmpneu, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    decimal double compare and branch if not equal or unordered */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ifddcmpltu, \
   /* .name                 = */ "ifddcmpltu", \
   /* .properties1          = */ ILProp1::BooleanCompare | ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess | ILProp3::CompareTrueIfUnordered, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::DecimalDouble), \
   /* .swapChildrenOpCode   = */ TR::ifddcmpgtu, \
   /* .reverseBranchOpCode  = */ TR::ifddcmpge, \
   /* .booleanCompareOpCode = */ TR::ddcmpltu, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    decimal double compare and branch if less than or unordered */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ifddcmpgeu, \
   /* .name                 = */ "ifddcmpgeu", \
   /* .properties1          = */ ILProp1::BooleanCompare | ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::CompareTrueIfGreater | ILProp3::CompareTrueIfEqual | ILProp3::CompareTrueIfUnordered, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::DecimalDouble), \
   /* .swapChildrenOpCode   = */ TR::ifddcmpleu, \
   /* .reverseBranchOpCode  = */ TR::ifddcmplt, \
   /* .booleanCompareOpCode = */ TR::ddcmpgeu, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    decimal double compare and branch if greater than or equal or unordered */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ifddcmpgtu, \
   /* .name                 = */ "ifddcmpgtu", \
   /* .properties1          = */ ILProp1::BooleanCompare | ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::CompareTrueIfGreater | ILProp3::CompareTrueIfUnordered, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::DecimalDouble), \
   /* .swapChildrenOpCode   = */ TR::ifddcmpltu, \
   /* .reverseBranchOpCode  = */ TR::ifddcmple, \
   /* .booleanCompareOpCode = */ TR::ddcmpgtu, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    decimal double compare and branch if greater than or unordered */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ifddcmpleu, \
   /* .name                 = */ "ifddcmpleu", \
   /* .properties1          = */ ILProp1::BooleanCompare | ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess | ILProp3::CompareTrueIfEqual | ILProp3::CompareTrueIfUnordered, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::DecimalDouble), \
   /* .swapChildrenOpCode   = */ TR::ifddcmpgeu, \
   /* .reverseBranchOpCode  = */ TR::ifddcmpgt, \
   /* .booleanCompareOpCode = */ TR::ddcmpleu, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    decimal double compare and branch if less than or equal or unordered */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ddcmpeq, \
   /* .name                 = */ "ddcmpeq", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::CompareTrueIfEqual, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::DecimalDouble), \
   /* .swapChildrenOpCode   = */ TR::ddcmpeq, \
   /* .reverseBranchOpCode  = */ TR::ddcmpneu, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::ifddcmpeq, \
   /* .description          =    decimal double compare if equal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ddcmpne, \
   /* .name                 = */ "ddcmpne", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess | ILProp3::CompareTrueIfGreater, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::DecimalDouble), \
   /* .swapChildrenOpCode   = */ TR::ddcmpne, \
   /* .reverseBranchOpCode  = */ TR::ddcmpequ, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::ifddcmpne, \
   /* .description          =    decimal double compare if not equal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ddcmplt, \
   /* .name                 = */ "ddcmplt", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::DecimalDouble), \
   /* .swapChildrenOpCode   = */ TR::ddcmpgt, \
   /* .reverseBranchOpCode  = */ TR::ddcmpgeu, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::ifddcmplt, \
   /* .description          =    decimal double compare if less than */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ddcmpge, \
   /* .name                 = */ "ddcmpge", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::CompareTrueIfGreater | ILProp3::CompareTrueIfEqual, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::DecimalDouble), \
   /* .swapChildrenOpCode   = */ TR::ddcmple, \
   /* .reverseBranchOpCode  = */ TR::ddcmpltu, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::ifddcmpge, \
   /* .description          =    decimal double compare if greater than or equal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ddcmpgt, \
   /* .name                 = */ "ddcmpgt", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::CompareTrueIfGreater, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::DecimalDouble), \
   /* .swapChildrenOpCode   = */ TR::ddcmplt, \
   /* .reverseBranchOpCode  = */ TR::ddcmpleu, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::ifddcmpgt, \
   /* .description          =    decimal double compare if greater than */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ddcmple, \
   /* .name                 = */ "ddcmple", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess | ILProp3::CompareTrueIfEqual, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::DecimalDouble), \
   /* .swapChildrenOpCode   = */ TR::ddcmpge, \
   /* .reverseBranchOpCode  = */ TR::ddcmpgtu, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::ifddcmple, \
   /* .description          =    decimal double compare if less than or equal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ddcmpequ, \
   /* .name                 = */ "ddcmpequ", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::CompareTrueIfEqual | ILProp3::CompareTrueIfUnordered, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::DecimalDouble), \
   /* .swapChildrenOpCode   = */ TR::ddcmpequ, \
   /* .reverseBranchOpCode  = */ TR::ddcmpne, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::ifddcmpequ, \
   /* .description          =    decimal double compare if equal or unordered */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ddcmpneu, \
   /* .name                 = */ "ddcmpneu", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess | ILProp3::CompareTrueIfGreater | ILProp3::CompareTrueIfUnordered, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::DecimalDouble), \
   /* .swapChildrenOpCode   = */ TR::ddcmpneu, \
   /* .reverseBranchOpCode  = */ TR::ddcmpeq, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::ifddcmpneu, \
   /* .description          =    decimal double compare if not equal or unordered */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ddcmpltu, \
   /* .name                 = */ "ddcmpltu", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess | ILProp3::CompareTrueIfUnordered, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::DecimalDouble), \
   /* .swapChildrenOpCode   = */ TR::ddcmpgtu, \
   /* .reverseBranchOpCode  = */ TR::ddcmpge, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::ifddcmpltu, \
   /* .description          =    decimal double compare if less than or unordered */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ddcmpgeu, \
   /* .name                 = */ "ddcmpgeu", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::CompareTrueIfGreater | ILProp3::CompareTrueIfEqual | ILProp3::CompareTrueIfUnordered, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::DecimalDouble), \
   /* .swapChildrenOpCode   = */ TR::ddcmpleu, \
   /* .reverseBranchOpCode  = */ TR::ddcmplt, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::ifddcmpgeu, \
   /* .description          =    decimal double compare if greater than or equal or unordered */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ddcmpgtu, \
   /* .name                 = */ "ddcmpgtu", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::CompareTrueIfGreater | ILProp3::CompareTrueIfUnordered, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::DecimalDouble), \
   /* .swapChildrenOpCode   = */ TR::ddcmpltu, \
   /* .reverseBranchOpCode  = */ TR::ddcmple, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::ifddcmpgtu, \
   /* .description          =    decimal double compare if greater than or unordered */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ddcmpleu, \
   /* .name                 = */ "ddcmpleu", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess | ILProp3::CompareTrueIfEqual | ILProp3::CompareTrueIfUnordered, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::DecimalDouble), \
   /* .swapChildrenOpCode   = */ TR::ddcmpgeu, \
   /* .reverseBranchOpCode  = */ TR::ddcmpgt, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::ifddcmpleu, \
   /* .description          =    decimal double compare if less than or equal or unordered */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ifdecmpeq, \
   /* .name                 = */ "ifdecmpeq", \
   /* .properties1          = */ ILProp1::BooleanCompare | ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::CompareTrueIfEqual, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::DecimalLongDouble), \
   /* .swapChildrenOpCode   = */ TR::ifdecmpeq, \
   /* .reverseBranchOpCode  = */ TR::ifdecmpneu, \
   /* .booleanCompareOpCode = */ TR::decmpeq, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    decimal long double compare and branch if equal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ifdecmpne, \
   /* .name                 = */ "ifdecmpne", \
   /* .properties1          = */ ILProp1::BooleanCompare | ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess | ILProp3::CompareTrueIfGreater, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::DecimalLongDouble), \
   /* .swapChildrenOpCode   = */ TR::ifdecmpne, \
   /* .reverseBranchOpCode  = */ TR::ifdecmpequ, \
   /* .booleanCompareOpCode = */ TR::decmpne, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    decimal long double compare and branch if not equal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ifdecmplt, \
   /* .name                 = */ "ifdecmplt", \
   /* .properties1          = */ ILProp1::BooleanCompare | ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::DecimalLongDouble), \
   /* .swapChildrenOpCode   = */ TR::ifdecmpgt, \
   /* .reverseBranchOpCode  = */ TR::ifdecmpgeu, \
   /* .booleanCompareOpCode = */ TR::decmplt, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    decimal long double compare and branch if less than */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ifdecmpge, \
   /* .name                 = */ "ifdecmpge", \
   /* .properties1          = */ ILProp1::BooleanCompare | ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::CompareTrueIfGreater | ILProp3::CompareTrueIfEqual, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::DecimalLongDouble), \
   /* .swapChildrenOpCode   = */ TR::ifdecmple, \
   /* .reverseBranchOpCode  = */ TR::ifdecmpltu, \
   /* .booleanCompareOpCode = */ TR::decmpge, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    decimal long double compare and branch if greater than or equal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ifdecmpgt, \
   /* .name                 = */ "ifdecmpgt", \
   /* .properties1          = */ ILProp1::BooleanCompare | ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::CompareTrueIfGreater, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::DecimalLongDouble), \
   /* .swapChildrenOpCode   = */ TR::ifdecmplt, \
   /* .reverseBranchOpCode  = */ TR::ifdecmpleu, \
   /* .booleanCompareOpCode = */ TR::decmpgt, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    decimal long double compare and branch if greater than */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ifdecmple, \
   /* .name                 = */ "ifdecmple", \
   /* .properties1          = */ ILProp1::BooleanCompare | ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess | ILProp3::CompareTrueIfEqual, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::DecimalLongDouble), \
   /* .swapChildrenOpCode   = */ TR::ifdecmpge, \
   /* .reverseBranchOpCode  = */ TR::ifdecmpgtu, \
   /* .booleanCompareOpCode = */ TR::decmple, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    decimal long double compare and branch if less than or equal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ifdecmpequ, \
   /* .name                 = */ "ifdecmpequ", \
   /* .properties1          = */ ILProp1::BooleanCompare | ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::CompareTrueIfEqual | ILProp3::CompareTrueIfUnordered, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::DecimalLongDouble), \
   /* .swapChildrenOpCode   = */ TR::ifdecmpequ, \
   /* .reverseBranchOpCode  = */ TR::ifdecmpne, \
   /* .booleanCompareOpCode = */ TR::decmpequ, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    decimal long double compare and branch if equal or unordered */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ifdecmpneu, \
   /* .name                 = */ "ifdecmpneu", \
   /* .properties1          = */ ILProp1::BooleanCompare | ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess | ILProp3::CompareTrueIfGreater | ILProp3::CompareTrueIfUnordered, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::DecimalLongDouble), \
   /* .swapChildrenOpCode   = */ TR::ifdecmpneu, \
   /* .reverseBranchOpCode  = */ TR::ifdecmpeq, \
   /* .booleanCompareOpCode = */ TR::decmpneu, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    decimal long double compare and branch if not equal or unordered */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ifdecmpltu, \
   /* .name                 = */ "ifdecmpltu", \
   /* .properties1          = */ ILProp1::BooleanCompare | ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess | ILProp3::CompareTrueIfUnordered, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::DecimalLongDouble), \
   /* .swapChildrenOpCode   = */ TR::ifdecmpgtu, \
   /* .reverseBranchOpCode  = */ TR::ifdecmpge, \
   /* .booleanCompareOpCode = */ TR::decmpltu, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    decimal long double compare and branch if less than or unordered */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ifdecmpgeu, \
   /* .name                 = */ "ifdecmpgeu", \
   /* .properties1          = */ ILProp1::BooleanCompare | ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::CompareTrueIfGreater | ILProp3::CompareTrueIfEqual | ILProp3::CompareTrueIfUnordered, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::DecimalLongDouble), \
   /* .swapChildrenOpCode   = */ TR::ifdecmpleu, \
   /* .reverseBranchOpCode  = */ TR::ifdecmplt, \
   /* .booleanCompareOpCode = */ TR::decmpgeu, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    decimal long double compare and branch if greater than or equal or unordered */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ifdecmpgtu, \
   /* .name                 = */ "ifdecmpgtu", \
   /* .properties1          = */ ILProp1::BooleanCompare | ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::CompareTrueIfGreater | ILProp3::CompareTrueIfUnordered, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::DecimalLongDouble), \
   /* .swapChildrenOpCode   = */ TR::ifdecmpltu, \
   /* .reverseBranchOpCode  = */ TR::ifdecmple, \
   /* .booleanCompareOpCode = */ TR::decmpgtu, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    decimal long double compare and branch if greater than or unordered */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ifdecmpleu, \
   /* .name                 = */ "ifdecmpleu", \
   /* .properties1          = */ ILProp1::BooleanCompare | ILProp1::Branch | ILProp1::TreeTop, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess | ILProp3::CompareTrueIfEqual | ILProp3::CompareTrueIfUnordered, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::DecimalLongDouble), \
   /* .swapChildrenOpCode   = */ TR::ifdecmpgeu, \
   /* .reverseBranchOpCode  = */ TR::ifdecmpgt, \
   /* .booleanCompareOpCode = */ TR::decmpleu, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    decimal long double compare and branch if less than or equal or unordered */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ decmpeq, \
   /* .name                 = */ "decmpeq", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::CompareTrueIfEqual, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::DecimalLongDouble), \
   /* .swapChildrenOpCode   = */ TR::decmpeq, \
   /* .reverseBranchOpCode  = */ TR::decmpneu, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::ifdecmpeq, \
   /* .description          =    decimal long double compare if equal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ decmpne, \
   /* .name                 = */ "decmpne", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess | ILProp3::CompareTrueIfGreater, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::DecimalLongDouble), \
   /* .swapChildrenOpCode   = */ TR::decmpne, \
   /* .reverseBranchOpCode  = */ TR::decmpequ, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::ifdecmpne, \
   /* .description          =    decimal long double compare if not equal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ decmplt, \
   /* .name                 = */ "decmplt", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::DecimalLongDouble), \
   /* .swapChildrenOpCode   = */ TR::decmpgt, \
   /* .reverseBranchOpCode  = */ TR::decmpgeu, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::ifdecmplt, \
   /* .description          =    decimal long double compare if less than */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ decmpge, \
   /* .name                 = */ "decmpge", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::CompareTrueIfGreater | ILProp3::CompareTrueIfEqual, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::DecimalLongDouble), \
   /* .swapChildrenOpCode   = */ TR::decmple, \
   /* .reverseBranchOpCode  = */ TR::decmpltu, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::ifdecmpge, \
   /* .description          =    decimal long double compare if greater than or equal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ decmpgt, \
   /* .name                 = */ "decmpgt", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::CompareTrueIfGreater, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::DecimalLongDouble), \
   /* .swapChildrenOpCode   = */ TR::decmplt, \
   /* .reverseBranchOpCode  = */ TR::decmpleu, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::ifdecmpgt, \
   /* .description          =    decimal long double compare if greater than */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ decmple, \
   /* .name                 = */ "decmple", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess | ILProp3::CompareTrueIfEqual, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::DecimalLongDouble), \
   /* .swapChildrenOpCode   = */ TR::decmpge, \
   /* .reverseBranchOpCode  = */ TR::decmpgtu, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::ifdecmple, \
   /* .description          =    decimal long double compare if less than or equal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ decmpequ, \
   /* .name                 = */ "decmpequ", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::CompareTrueIfEqual | ILProp3::CompareTrueIfUnordered, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::DecimalLongDouble), \
   /* .swapChildrenOpCode   = */ TR::decmpequ, \
   /* .reverseBranchOpCode  = */ TR::decmpne, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::ifdecmpequ, \
   /* .description          =    decimal long double compare if equal or unordered */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ decmpneu, \
   /* .name                 = */ "decmpneu", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess | ILProp3::CompareTrueIfGreater | ILProp3::CompareTrueIfUnordered, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::DecimalLongDouble), \
   /* .swapChildrenOpCode   = */ TR::decmpneu, \
   /* .reverseBranchOpCode  = */ TR::decmpeq, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::ifdecmpneu, \
   /* .description          =    decimal long double compare if not equal or unordered */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ decmpltu, \
   /* .name                 = */ "decmpltu", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess | ILProp3::CompareTrueIfUnordered, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::DecimalLongDouble), \
   /* .swapChildrenOpCode   = */ TR::decmpgtu, \
   /* .reverseBranchOpCode  = */ TR::decmpge, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::ifdecmpltu, \
   /* .description          =    decimal long double compare if less than or unordered */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ decmpgeu, \
   /* .name                 = */ "decmpgeu", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::CompareTrueIfGreater | ILProp3::CompareTrueIfEqual | ILProp3::CompareTrueIfUnordered, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::DecimalLongDouble), \
   /* .swapChildrenOpCode   = */ TR::decmpleu, \
   /* .reverseBranchOpCode  = */ TR::decmplt, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::ifdecmpgeu, \
   /* .description          =    decimal long double compare if greater than or equal or unordered */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ decmpgtu, \
   /* .name                 = */ "decmpgtu", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::CompareTrueIfGreater | ILProp3::CompareTrueIfUnordered, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::DecimalLongDouble), \
   /* .swapChildrenOpCode   = */ TR::decmpltu, \
   /* .reverseBranchOpCode  = */ TR::decmple, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::ifdecmpgtu, \
   /* .description          =    decimal long double compare if greater than or unordered */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ decmpleu, \
   /* .name                 = */ "decmpleu", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess | ILProp3::CompareTrueIfEqual | ILProp3::CompareTrueIfUnordered, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::DecimalLongDouble), \
   /* .swapChildrenOpCode   = */ TR::decmpgeu, \
   /* .reverseBranchOpCode  = */ TR::decmpgt, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::ifdecmpleu, \
   /* .description          =    decimal long double compare if less than or equal or unordered */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ dfRegLoad, \
   /* .name                 = */ "dfRegLoad", \
   /* .properties1          = */ ILProp1::LoadReg, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalFloat, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ILChildProp::NoChildren, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    Load decimal float global register */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ddRegLoad, \
   /* .name                 = */ "ddRegLoad", \
   /* .properties1          = */ ILProp1::LoadReg, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ILChildProp::NoChildren, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    Load decimal double global register */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ deRegLoad, \
   /* .name                 = */ "deRegLoad", \
   /* .properties1          = */ ILProp1::LoadReg, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalLongDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ILChildProp::NoChildren, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    Load decimal long double global register */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ dfRegStore, \
   /* .name                 = */ "dfRegStore", \
   /* .properties1          = */ ILProp1::StoreReg | ILProp1::TreeTop, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalFloat, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalFloat), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    Store decimal float global register */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ddRegStore, \
   /* .name                 = */ "ddRegStore", \
   /* .properties1          = */ ILProp1::StoreReg | ILProp1::TreeTop, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalDouble), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    Store decimal double global register */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ deRegStore, \
   /* .name                 = */ "deRegStore", \
   /* .properties1          = */ ILProp1::StoreReg | ILProp1::TreeTop, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalLongDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalLongDouble), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    Store decimal long double global register */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ dfselect, \
   /* .name                 = */ "dfselect", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE | ILProp2::Select, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalFloat, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ THREE_CHILD(TR::Int32, TR::DecimalFloat, TR::DecimalFloat), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    Select Operator:  Based on the result of the first child, take the value of the second or the third child.  Analogous to the "condition ? a : b" operations in C/Java. */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ddselect, \
   /* .name                 = */ "ddselect", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE | ILProp2::Select, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ THREE_CHILD(TR::Int32, TR::DecimalDouble, TR::DecimalDouble), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ deselect, \
   /* .name                 = */ "deselect", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE | ILProp2::Select, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalLongDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ THREE_CHILD(TR::Int32, TR::DecimalLongDouble, TR::DecimalLongDouble), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ dfexp, \
   /* .name                 = */ "dfexp", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalFloat, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::DecimalFloat), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    decimal float exponent */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ddexp, \
   /* .name                 = */ "ddexp", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::DecimalDouble), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    decimal double exponent */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ deexp, \
   /* .name                 = */ "deexp", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalLongDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::DecimalLongDouble), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    decimal long double exponent */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ dfnint, \
   /* .name                 = */ "dfnint", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalFloat, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalFloat), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    round decimal float to nearest int */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ddnint, \
   /* .name                 = */ "ddnint", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalDouble), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    round decimal double to nearest int */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ denint, \
   /* .name                 = */ "denint", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalLongDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalLongDouble), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    round decimal long double to nearest int */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ dfsqrt, \
   /* .name                 = */ "dfsqrt", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalFloat, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalFloat), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    square root of decimal float */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ddsqrt, \
   /* .name                 = */ "ddsqrt", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalDouble), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    square root of decimal double */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ desqrt, \
   /* .name                 = */ "desqrt", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalLongDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalLongDouble), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    square root of decimal long double */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ dfcos, \
   /* .name                 = */ "dfcos", \
   /* .properties1          = */ ILProp1::Call | ILProp1::HasSymbolRef, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::LikeUse | ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalFloat, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalFloat), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    cos of decimal float, returning decimal float */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ddcos, \
   /* .name                 = */ "ddcos", \
   /* .properties1          = */ ILProp1::Call | ILProp1::HasSymbolRef, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::LikeUse | ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalDouble), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    cos of decimal double, returning decimal double */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ decos, \
   /* .name                 = */ "decos", \
   /* .properties1          = */ ILProp1::Call | ILProp1::HasSymbolRef, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::LikeUse | ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalLongDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalLongDouble), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    cos of decimal long double, returning decimal long double */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ dfsin, \
   /* .name                 = */ "dfsin", \
   /* .properties1          = */ ILProp1::Call | ILProp1::HasSymbolRef, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::LikeUse | ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalFloat, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalFloat), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    sin of decimal float, returning decimal float */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ddsin, \
   /* .name                 = */ "ddsin", \
   /* .properties1          = */ ILProp1::Call | ILProp1::HasSymbolRef, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::LikeUse | ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalDouble), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    sin of decimal double, returning decimal double */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ desin, \
   /* .name                 = */ "desin", \
   /* .properties1          = */ ILProp1::Call | ILProp1::HasSymbolRef, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::LikeUse | ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalLongDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalLongDouble), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    sin of decimal long double, returning decimal long double */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ dftan, \
   /* .name                 = */ "dftan", \
   /* .properties1          = */ ILProp1::Call | ILProp1::HasSymbolRef, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::LikeUse | ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalFloat, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalFloat), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    tan of decimal float, returning decimal float */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ddtan, \
   /* .name                 = */ "ddtan", \
   /* .properties1          = */ ILProp1::Call | ILProp1::HasSymbolRef, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::LikeUse | ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalDouble), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    tan of decimal double, returning decimal double */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ detan, \
   /* .name                 = */ "detan", \
   /* .properties1          = */ ILProp1::Call | ILProp1::HasSymbolRef, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::LikeUse | ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalLongDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalLongDouble), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    tan of decimal long double, returning decimal long double */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ dfcosh, \
   /* .name                 = */ "dfcosh", \
   /* .properties1          = */ ILProp1::Call | ILProp1::HasSymbolRef, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::LikeUse | ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalFloat, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalFloat), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    cosh of decimal float, returning decimal float */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ddcosh, \
   /* .name                 = */ "ddcosh", \
   /* .properties1          = */ ILProp1::Call | ILProp1::HasSymbolRef, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::LikeUse | ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalDouble), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    cosh of decimal double, returning decimal double */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ decosh, \
   /* .name                 = */ "decosh", \
   /* .properties1          = */ ILProp1::Call | ILProp1::HasSymbolRef, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::LikeUse | ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalLongDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalLongDouble), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    cosh of decimal long double, returning decimal long double */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ dfsinh, \
   /* .name                 = */ "dfsinh", \
   /* .properties1          = */ ILProp1::Call | ILProp1::HasSymbolRef, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::LikeUse | ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalFloat, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalFloat), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    sinh of decimal float, returning decimal float */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ddsinh, \
   /* .name                 = */ "ddsinh", \
   /* .properties1          = */ ILProp1::Call | ILProp1::HasSymbolRef, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::LikeUse | ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalDouble), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    sinh of decimal double, returning decimal double */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ desinh, \
   /* .name                 = */ "desinh", \
   /* .properties1          = */ ILProp1::Call | ILProp1::HasSymbolRef, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::LikeUse | ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalLongDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalLongDouble), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    sinh of decimal long double, returning decimal long double */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ dftanh, \
   /* .name                 = */ "dftanh", \
   /* .properties1          = */ ILProp1::Call | ILProp1::HasSymbolRef, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::LikeUse | ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalFloat, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalFloat), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    tanh of decimal float, returning decimal float */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ddtanh, \
   /* .name                 = */ "ddtanh", \
   /* .properties1          = */ ILProp1::Call | ILProp1::HasSymbolRef, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::LikeUse | ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalDouble), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    tanh of decimal double, returning decimal double */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ detanh, \
   /* .name                 = */ "detanh", \
   /* .properties1          = */ ILProp1::Call | ILProp1::HasSymbolRef, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::LikeUse | ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalLongDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalLongDouble), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    tanh of decimal long double, returning decimal long double */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ dfacos, \
   /* .name                 = */ "dfacos", \
   /* .properties1          = */ ILProp1::Call | ILProp1::HasSymbolRef, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::LikeUse | ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalFloat, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalFloat), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    arccos of decimal float , returning decimal float */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ddacos, \
   /* .name                 = */ "ddacos", \
   /* .properties1          = */ ILProp1::Call | ILProp1::HasSymbolRef, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::LikeUse | ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalDouble), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    arccos of decimal double, returning decimal double */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ deacos, \
   /* .name                 = */ "deacos", \
   /* .properties1          = */ ILProp1::Call | ILProp1::HasSymbolRef, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::LikeUse | ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalLongDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalLongDouble), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    arccos of decimal long double, returning decimal long double */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ dfasin, \
   /* .name                 = */ "dfasin", \
   /* .properties1          = */ ILProp1::Call | ILProp1::HasSymbolRef, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::LikeUse | ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalFloat, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalFloat), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    arcsin of decimal float , returning decimal float */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ddasin, \
   /* .name                 = */ "ddasin", \
   /* .properties1          = */ ILProp1::Call | ILProp1::HasSymbolRef, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::LikeUse | ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalDouble), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    arcsin of decimal double, returning decimal double */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ deasin, \
   /* .name                 = */ "deasin", \
   /* .properties1          = */ ILProp1::Call | ILProp1::HasSymbolRef, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::LikeUse | ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalLongDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalLongDouble), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    arcsin of decimal long double, returning decimal long double */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ dfatan, \
   /* .name                 = */ "dfatan", \
   /* .properties1          = */ ILProp1::Call | ILProp1::HasSymbolRef, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::LikeUse | ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalFloat, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalFloat), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    arctan of decimal float , returning decimal float */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ddatan, \
   /* .name                 = */ "ddatan", \
   /* .properties1          = */ ILProp1::Call | ILProp1::HasSymbolRef, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::LikeUse | ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalDouble), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    arctan of decimal double, returning decimal double */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ deatan, \
   /* .name                 = */ "deatan", \
   /* .properties1          = */ ILProp1::Call | ILProp1::HasSymbolRef, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::LikeUse | ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalLongDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalLongDouble), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    arctan of decimal long double, returning decimal long double */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ dfatan2, \
   /* .name                 = */ "dfatan2", \
   /* .properties1          = */ ILProp1::Call | ILProp1::HasSymbolRef, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::LikeUse | ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalFloat, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::DecimalFloat), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    arctan2 of decimal float , returning decimal float */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ddatan2, \
   /* .name                 = */ "ddatan2", \
   /* .properties1          = */ ILProp1::Call | ILProp1::HasSymbolRef, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::LikeUse | ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::DecimalDouble), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    arctan2 of decimal double, returning decimal double */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ deatan2, \
   /* .name                 = */ "deatan2", \
   /* .properties1          = */ ILProp1::Call | ILProp1::HasSymbolRef, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::LikeUse | ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalLongDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::DecimalLongDouble), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    arctan2 of decimal long double, returning decimal long double */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ dflog, \
   /* .name                 = */ "dflog", \
   /* .properties1          = */ ILProp1::Call | ILProp1::HasSymbolRef, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::LikeUse | ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalFloat, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalFloat), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    log of decimal float , returning decimal float */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ddlog, \
   /* .name                 = */ "ddlog", \
   /* .properties1          = */ ILProp1::Call | ILProp1::HasSymbolRef, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::LikeUse | ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalDouble), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    log of decimal double, returning decimal double */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ delog, \
   /* .name                 = */ "delog", \
   /* .properties1          = */ ILProp1::Call | ILProp1::HasSymbolRef, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ ILProp3::LikeUse | ILProp3::LikeDef, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalLongDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalLongDouble), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    log of decimal long double, returning decimal long double */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ dffloor, \
   /* .name                 = */ "dffloor", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalFloat, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalFloat), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    floor of decimal float , returning decimal float */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ddfloor, \
   /* .name                 = */ "ddfloor", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalDouble), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    floor of decimal double, returning decimal double */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ defloor, \
   /* .name                 = */ "defloor", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalLongDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalLongDouble), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    floor of decimal long double, returning decimal long double */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ dfceil, \
   /* .name                 = */ "dfceil", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalFloat, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalFloat), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    ceil of decimal float , returning decimal float */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ddceil, \
   /* .name                 = */ "ddceil", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalDouble), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    ceil of decimal double, returning decimal double */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ deceil, \
   /* .name                 = */ "deceil", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalLongDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalLongDouble), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    ceil of decimal long double, returning decimal long double */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ dfmax, \
   /* .name                 = */ "dfmax", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE | ILProp2::Max, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalFloat, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::DecimalFloat), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    max of decimal float , returning decimal float */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ddmax, \
   /* .name                 = */ "ddmax", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE | ILProp2::Max, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::DecimalDouble), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    max of decimal double, returning decimal double */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ demax, \
   /* .name                 = */ "demax", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE | ILProp2::Max, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalLongDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::DecimalLongDouble), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    max of decimal long double, returning decimal long double */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ dfmin, \
   /* .name                 = */ "dfmin", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE | ILProp2::Min, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalFloat, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::DecimalFloat), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    min of decimal float , returning decimal float */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ddmin, \
   /* .name                 = */ "ddmin", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE | ILProp2::Min, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::DecimalDouble), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    min of decimal double, returning decimal double */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ demin, \
   /* .name                 = */ "demin", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE | ILProp2::Min, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalLongDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::DecimalLongDouble), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    min of decimal long double, returning decimal long double */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ dfInsExp, \
   /* .name                 = */ "dfInsExp", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalFloat, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::DecimalFloat), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    decimal float insert exponent */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ddInsExp, \
   /* .name                 = */ "ddInsExp", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::DecimalDouble), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    decimal double insert exponent */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ deInsExp, \
   /* .name                 = */ "deInsExp", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalLongDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::DecimalLongDouble), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    decimal long double insert exponent */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ddclean, \
   /* .name                 = */ "ddclean", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ILChildProp::Unspecified, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          = */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ declean, \
   /* .name                 = */ "declean", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::DecimalLongDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ILChildProp::Unspecified, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          = */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ zdload, \
   /* .name                 = */ "zdload", \
   /* .properties1          = */ ILProp1::LoadVar | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE | ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ ILProp4::BinaryCodedDecimalOp, \
   /* .dataType             = */ TR::ZonedDecimal, \
   /* .typeProperties       = */ ILTypeProp::ZonedDecimal, \
   /* .childProperties      = */ ILChildProp::NoChildren, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    zoned decimal load */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ zdloadi, \
   /* .name                 = */ "zdloadi", \
   /* .properties1          = */ ILProp1::LoadVar | ILProp1::Indirect | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE | ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ ILProp4::BinaryCodedDecimalOp, \
   /* .dataType             = */ TR::ZonedDecimal, \
   /* .typeProperties       = */ ILTypeProp::ZonedDecimal, \
   /* .childProperties      = */ ONE_CHILD(TR::Address), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    indirect zoned decimal load */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ zdstore, \
   /* .name                 = */ "zdstore", \
   /* .properties1          = */ ILProp1::Store | ILProp1::TreeTop | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeDef, \
   /* .properties4          = */ ILProp4::BinaryCodedDecimalOp | ILProp4::CanHavePaddingAddress | ILProp4::CanUseStoreAsAnAccumulator, \
   /* .dataType             = */ TR::ZonedDecimal, \
   /* .typeProperties       = */ ILTypeProp::ZonedDecimal, \
   /* .childProperties      = */ ONE_CHILD(TR::ZonedDecimal), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    zoned decimal store */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ zdstorei, \
   /* .name                 = */ "zdstorei", \
   /* .properties1          = */ ILProp1::Store | ILProp1::Indirect | ILProp1::TreeTop | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeDef, \
   /* .properties4          = */ ILProp4::BinaryCodedDecimalOp | ILProp4::CanHavePaddingAddress | ILProp4::CanUseStoreAsAnAccumulator, \
   /* .dataType             = */ TR::ZonedDecimal, \
   /* .typeProperties       = */ ILTypeProp::ZonedDecimal, \
   /* .childProperties      = */ TWO_CHILD(TR::Address, TR::ZonedDecimal), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    indirect zoned decimal store */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ pd2zd, \
   /* .name                 = */ "pd2zd", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ ILProp4::BinaryCodedDecimalOp | ILProp4::CanHaveStorageReferenceHint | ILProp4::CanHavePaddingAddress, \
   /* .dataType             = */ TR::ZonedDecimal, \
   /* .typeProperties       = */ ILTypeProp::ZonedDecimal, \
   /* .childProperties      = */ ONE_CHILD(TR::PackedDecimal), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    packed decimal to zoned decimal (UNPK) */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ zd2pd, \
   /* .name                 = */ "zd2pd", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ ILProp4::BinaryCodedDecimalOp | ILProp4::CanHaveStorageReferenceHint, \
   /* .dataType             = */ TR::PackedDecimal, \
   /* .typeProperties       = */ ILTypeProp::PackedDecimal, \
   /* .childProperties      = */ ONE_CHILD(TR::ZonedDecimal), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    zoned decimal to packed decimal (PACK) */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ zdsleLoad, \
   /* .name                 = */ "zdsleLoad", \
   /* .properties1          = */ ILProp1::LoadVar | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE | ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ ILProp4::BinaryCodedDecimalOp, \
   /* .dataType             = */ TR::ZonedDecimalSignLeadingEmbedded, \
   /* .typeProperties       = */ ILTypeProp::ZonedDecimalSignLeadingEmbedded, \
   /* .childProperties      = */ ILChildProp::NoChildren, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    zoned decimal sign leading embedded load */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ zdslsLoad, \
   /* .name                 = */ "zdslsLoad", \
   /* .properties1          = */ ILProp1::LoadVar | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE | ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ ILProp4::BinaryCodedDecimalOp, \
   /* .dataType             = */ TR::ZonedDecimalSignLeadingSeparate, \
   /* .typeProperties       = */ ILTypeProp::ZonedDecimalSignLeadingSeparate, \
   /* .childProperties      = */ ILChildProp::NoChildren, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    zoned decimal sign leading separate load */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ zdstsLoad, \
   /* .name                 = */ "zdstsLoad", \
   /* .properties1          = */ ILProp1::LoadVar | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE | ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ ILProp4::BinaryCodedDecimalOp, \
   /* .dataType             = */ TR::ZonedDecimalSignTrailingSeparate, \
   /* .typeProperties       = */ ILTypeProp::ZonedDecimalSignTrailingSeparate, \
   /* .childProperties      = */ ILChildProp::NoChildren, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    zoned decimal sign leading separate load */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ zdsleLoadi, \
   /* .name                 = */ "zdsleLoadi", \
   /* .properties1          = */ ILProp1::LoadVar | ILProp1::Indirect | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE | ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ ILProp4::BinaryCodedDecimalOp, \
   /* .dataType             = */ TR::ZonedDecimalSignLeadingEmbedded, \
   /* .typeProperties       = */ ILTypeProp::ZonedDecimalSignLeadingEmbedded, \
   /* .childProperties      = */ ONE_CHILD(TR::Address), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    indirect zoned decimal sign leading embedded load */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ zdslsLoadi, \
   /* .name                 = */ "zdslsLoadi", \
   /* .properties1          = */ ILProp1::LoadVar | ILProp1::Indirect | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE | ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ ILProp4::BinaryCodedDecimalOp, \
   /* .dataType             = */ TR::ZonedDecimalSignLeadingSeparate, \
   /* .typeProperties       = */ ILTypeProp::ZonedDecimalSignLeadingSeparate, \
   /* .childProperties      = */ ONE_CHILD(TR::Address), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    indirect zoned decimal sign leading separate load */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ zdstsLoadi, \
   /* .name                 = */ "zdstsLoadi", \
   /* .properties1          = */ ILProp1::LoadVar | ILProp1::Indirect | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE | ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ ILProp4::BinaryCodedDecimalOp, \
   /* .dataType             = */ TR::ZonedDecimalSignTrailingSeparate, \
   /* .typeProperties       = */ ILTypeProp::ZonedDecimalSignTrailingSeparate, \
   /* .childProperties      = */ ONE_CHILD(TR::Address), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    indirect zoned decimal sign trailing separate load */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ zdsleStore, \
   /* .name                 = */ "zdsleStore", \
   /* .properties1          = */ ILProp1::Store | ILProp1::TreeTop | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeDef, \
   /* .properties4          = */ ILProp4::BinaryCodedDecimalOp | ILProp4::CanHavePaddingAddress | ILProp4::CanUseStoreAsAnAccumulator, \
   /* .dataType             = */ TR::ZonedDecimalSignLeadingEmbedded, \
   /* .typeProperties       = */ ILTypeProp::ZonedDecimalSignLeadingEmbedded, \
   /* .childProperties      = */ ONE_CHILD(TR::ZonedDecimalSignLeadingEmbedded), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    zoned decimal sign leading embedded store */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ zdslsStore, \
   /* .name                 = */ "zdslsStore", \
   /* .properties1          = */ ILProp1::Store | ILProp1::TreeTop | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeDef, \
   /* .properties4          = */ ILProp4::BinaryCodedDecimalOp | ILProp4::CanUseStoreAsAnAccumulator, \
   /* .dataType             = */ TR::ZonedDecimalSignLeadingSeparate, \
   /* .typeProperties       = */ ILTypeProp::ZonedDecimalSignLeadingSeparate, \
   /* .childProperties      = */ ONE_CHILD(TR::ZonedDecimalSignLeadingSeparate), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    zoned decimal sign leading separate store */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ zdstsStore, \
   /* .name                 = */ "zdstsStore", \
   /* .properties1          = */ ILProp1::Store | ILProp1::TreeTop | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeDef, \
   /* .properties4          = */ ILProp4::BinaryCodedDecimalOp | ILProp4::CanUseStoreAsAnAccumulator, \
   /* .dataType             = */ TR::ZonedDecimalSignTrailingSeparate, \
   /* .typeProperties       = */ ILTypeProp::ZonedDecimalSignTrailingSeparate, \
   /* .childProperties      = */ ONE_CHILD(TR::ZonedDecimalSignTrailingSeparate), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    zoned decimal sign trailing separate store */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ zdsleStorei, \
   /* .name                 = */ "zdsleStorei", \
   /* .properties1          = */ ILProp1::Store | ILProp1::Indirect | ILProp1::TreeTop | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeDef, \
   /* .properties4          = */ ILProp4::BinaryCodedDecimalOp | ILProp4::CanHavePaddingAddress | ILProp4::CanUseStoreAsAnAccumulator, \
   /* .dataType             = */ TR::ZonedDecimalSignLeadingEmbedded, \
   /* .typeProperties       = */ ILTypeProp::ZonedDecimalSignLeadingEmbedded, \
   /* .childProperties      = */ TWO_CHILD(TR::Address, TR::ZonedDecimalSignLeadingEmbedded), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    indirect zoned decimal sign leading embedded store */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ zdslsStorei, \
   /* .name                 = */ "zdslsStorei", \
   /* .properties1          = */ ILProp1::Store | ILProp1::Indirect | ILProp1::TreeTop | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeDef, \
   /* .properties4          = */ ILProp4::BinaryCodedDecimalOp | ILProp4::CanUseStoreAsAnAccumulator, \
   /* .dataType             = */ TR::ZonedDecimalSignLeadingSeparate, \
   /* .typeProperties       = */ ILTypeProp::ZonedDecimalSignLeadingSeparate, \
   /* .childProperties      = */ TWO_CHILD(TR::Address, TR::ZonedDecimalSignLeadingSeparate), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    indirect zoned decimal sign leading separate store */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ zdstsStorei, \
   /* .name                 = */ "zdstsStorei", \
   /* .properties1          = */ ILProp1::Store | ILProp1::Indirect | ILProp1::TreeTop | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeDef, \
   /* .properties4          = */ ILProp4::BinaryCodedDecimalOp | ILProp4::CanUseStoreAsAnAccumulator, \
   /* .dataType             = */ TR::ZonedDecimalSignTrailingSeparate, \
   /* .typeProperties       = */ ILTypeProp::ZonedDecimalSignTrailingSeparate, \
   /* .childProperties      = */ TWO_CHILD(TR::Address, TR::ZonedDecimalSignTrailingSeparate), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    indirect zoned decimal sign trailing separate store */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ zd2zdsle, \
   /* .name                 = */ "zd2zdsle", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ ILProp4::BinaryCodedDecimalOp | ILProp4::CanHaveStorageReferenceHint, \
   /* .dataType             = */ TR::ZonedDecimalSignLeadingEmbedded, \
   /* .typeProperties       = */ ILTypeProp::ZonedDecimalSignLeadingEmbedded, \
   /* .childProperties      = */ ONE_CHILD(TR::ZonedDecimal), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    zoned decimal to zoned decimal sign leading embedded */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ zd2zdsls, \
   /* .name                 = */ "zd2zdsls", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ ILProp4::BinaryCodedDecimalOp | ILProp4::CanHaveStorageReferenceHint, \
   /* .dataType             = */ TR::ZonedDecimalSignLeadingSeparate, \
   /* .typeProperties       = */ ILTypeProp::ZonedDecimalSignLeadingSeparate, \
   /* .childProperties      = */ ONE_CHILD(TR::ZonedDecimal), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    zoned decimal to zoned decimal sign leading separate */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ zd2zdsts, \
   /* .name                 = */ "zd2zdsts", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ ILProp4::BinaryCodedDecimalOp | ILProp4::CanHaveStorageReferenceHint, \
   /* .dataType             = */ TR::ZonedDecimalSignTrailingSeparate, \
   /* .typeProperties       = */ ILTypeProp::ZonedDecimalSignTrailingSeparate, \
   /* .childProperties      = */ ONE_CHILD(TR::ZonedDecimal), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    zoned decimal to zoned decimal sign trailing separate */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ zdsle2pd, \
   /* .name                 = */ "zdsle2pd", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ ILProp4::BinaryCodedDecimalOp | ILProp4::CanHaveStorageReferenceHint, \
   /* .dataType             = */ TR::PackedDecimal, \
   /* .typeProperties       = */ ILTypeProp::PackedDecimal, \
   /* .childProperties      = */ ONE_CHILD(TR::ZonedDecimalSignLeadingEmbedded), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    zoned decimal sign leading embedded to packed decimal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ zdsls2pd, \
   /* .name                 = */ "zdsls2pd", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ ILProp4::BinaryCodedDecimalOp | ILProp4::CanHaveStorageReferenceHint, \
   /* .dataType             = */ TR::PackedDecimal, \
   /* .typeProperties       = */ ILTypeProp::PackedDecimal, \
   /* .childProperties      = */ ONE_CHILD(TR::ZonedDecimalSignLeadingSeparate), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    zoned decimal sign leading separate to packed decimal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ zdsts2pd, \
   /* .name                 = */ "zdsts2pd", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ ILProp4::BinaryCodedDecimalOp | ILProp4::CanHaveStorageReferenceHint, \
   /* .dataType             = */ TR::PackedDecimal, \
   /* .typeProperties       = */ ILTypeProp::PackedDecimal, \
   /* .childProperties      = */ ONE_CHILD(TR::ZonedDecimalSignTrailingSeparate), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    zoned decimal sign trailing separate to packed decimal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ zdsle2zd, \
   /* .name                 = */ "zdsle2zd", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ ILProp4::BinaryCodedDecimalOp | ILProp4::CanHaveStorageReferenceHint, \
   /* .dataType             = */ TR::ZonedDecimal, \
   /* .typeProperties       = */ ILTypeProp::ZonedDecimal, \
   /* .childProperties      = */ ONE_CHILD(TR::ZonedDecimalSignLeadingEmbedded), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    zoned decimal sign leading embedded to zoned decimal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ zdsls2zd, \
   /* .name                 = */ "zdsls2zd", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ ILProp4::BinaryCodedDecimalOp | ILProp4::CanHaveStorageReferenceHint, \
   /* .dataType             = */ TR::ZonedDecimal, \
   /* .typeProperties       = */ ILTypeProp::ZonedDecimal, \
   /* .childProperties      = */ ONE_CHILD(TR::ZonedDecimalSignLeadingSeparate), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    zoned decimal sign leading separate to zoned decimal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ zdsts2zd, \
   /* .name                 = */ "zdsts2zd", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ ILProp4::BinaryCodedDecimalOp | ILProp4::CanHaveStorageReferenceHint, \
   /* .dataType             = */ TR::ZonedDecimal, \
   /* .typeProperties       = */ ILTypeProp::ZonedDecimal, \
   /* .childProperties      = */ ONE_CHILD(TR::ZonedDecimalSignTrailingSeparate), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    zoned decimal sign trailing separate to zoned decimal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ pd2zdsls, \
   /* .name                 = */ "pd2zdsls", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ ILProp4::BinaryCodedDecimalOp | ILProp4::CanHaveStorageReferenceHint, \
   /* .dataType             = */ TR::ZonedDecimalSignLeadingSeparate, \
   /* .typeProperties       = */ ILTypeProp::ZonedDecimalSignLeadingSeparate, \
   /* .childProperties      = */ ONE_CHILD(TR::PackedDecimal), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    packed decimal to zoned decimal sign leading separate */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ pd2zdslsSetSign, \
   /* .name                 = */ "pd2zdslsSetSign", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ ILProp4::SetSign | ILProp4::BinaryCodedDecimalOp | ILProp4::CanHaveStorageReferenceHint, \
   /* .dataType             = */ TR::ZonedDecimalSignLeadingSeparate, \
   /* .typeProperties       = */ ILTypeProp::ZonedDecimal, \
   /* .childProperties      = */ ONE_CHILD(TR::PackedDecimal), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    packed decimal to zoned decimal sign leading separate with forced sign code setting */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ pd2zdsts, \
   /* .name                 = */ "pd2zdsts", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ ILProp4::BinaryCodedDecimalOp | ILProp4::CanHaveStorageReferenceHint, \
   /* .dataType             = */ TR::ZonedDecimalSignTrailingSeparate, \
   /* .typeProperties       = */ ILTypeProp::ZonedDecimal, \
   /* .childProperties      = */ ONE_CHILD(TR::PackedDecimal), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    packed decimal to zoned decimal sign trailing separate */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ pd2zdstsSetSign, \
   /* .name                 = */ "pd2zdstsSetSign", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ ILProp4::SetSign | ILProp4::BinaryCodedDecimalOp | ILProp4::CanHaveStorageReferenceHint, \
   /* .dataType             = */ TR::ZonedDecimalSignTrailingSeparate, \
   /* .typeProperties       = */ ILTypeProp::ZonedDecimalSignTrailingSeparate, \
   /* .childProperties      = */ ONE_CHILD(TR::PackedDecimal), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    packed decimal to zoned decimal sign trailing separate with forced sign code setting */ \
)
   /*!
    * \brief convert from zoned decimal to 32-bit DFP.
    */
OPCODE_MACRO(\
   /* .opcode               = */ zd2df, \
   /* .name                 = */ "zd2df", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ ILProp4::BinaryCodedDecimalOp | ILProp4::ConversionHasFraction, \
   /* .dataType             = */ TR::DecimalFloat, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ONE_CHILD(TR::ZonedDecimal), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    zoned decimal to decimal float */ \
)
   /*!
    * \brief convert from 32-bit DFP to zoned decimal.
    */
OPCODE_MACRO(\
   /* .opcode               = */ df2zd, \
   /* .name                 = */ "df2zd", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ ILProp4::BinaryCodedDecimalOp | ILProp4::ConversionHasFraction | ILProp4::CanHaveStorageReferenceHint, \
   /* .dataType             = */ TR::ZonedDecimal, \
   /* .typeProperties       = */ ILTypeProp::ZonedDecimal, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalFloat), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    decimal float to zoned decimal */ \
)
   /*!
    * \brief convert from zoned decimal to 64-bit DFP.
    */
OPCODE_MACRO(\
   /* .opcode               = */ zd2dd, \
   /* .name                 = */ "zd2dd", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ ILProp4::BinaryCodedDecimalOp | ILProp4::ConversionHasFraction, \
   /* .dataType             = */ TR::DecimalDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ONE_CHILD(TR::ZonedDecimal), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    zoned decimal to decimal double */ \
)
   /*!
    * \brief convert from 64-bit DFP to zoned decimal.
    */
OPCODE_MACRO(\
   /* .opcode               = */ dd2zd, \
   /* .name                 = */ "dd2zd", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ ILProp4::BinaryCodedDecimalOp | ILProp4::ConversionHasFraction | ILProp4::CanHaveStorageReferenceHint, \
   /* .dataType             = */ TR::ZonedDecimal, \
   /* .typeProperties       = */ ILTypeProp::ZonedDecimal, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalDouble), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    decimal double to zoned decimal */ \
)
   /*!
    * \brief convert from zoned decimal to 128-bit DFP.
    */
OPCODE_MACRO(\
   /* .opcode               = */ zd2de, \
   /* .name                 = */ "zd2de", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ ILProp4::BinaryCodedDecimalOp | ILProp4::ConversionHasFraction, \
   /* .dataType             = */ TR::DecimalLongDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ONE_CHILD(TR::ZonedDecimal), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    zoned decimal to decimal long double */ \
)
   /*!
    * \brief convert from 128-bit DFP to zoned decimal.
    */
OPCODE_MACRO(\
   /* .opcode               = */ de2zd, \
   /* .name                 = */ "de2zd", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ ILProp4::BinaryCodedDecimalOp | ILProp4::ConversionHasFraction | ILProp4::CanHaveStorageReferenceHint, \
   /* .dataType             = */ TR::ZonedDecimal, \
   /* .typeProperties       = */ ILTypeProp::ZonedDecimal, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalLongDouble), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    decimal long double to zoned decimal */ \
)
   /*!
    * \brief convert from zoned decimal to 32-bit DFP, forcing a positive sign on the DFP value
    *
    * On z/OS, the zoned to DFP conversion op can treat the zoned value as unsigned, forcing a
    * positive sign on the result for free.
    */
OPCODE_MACRO(\
   /* .opcode               = */ zd2dfAbs, \
   /* .name                 = */ "zd2dfAbs", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ ILProp4::BinaryCodedDecimalOp | ILProp4::ConversionHasFraction, \
   /* .dataType             = */ TR::DecimalFloat, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ONE_CHILD(TR::ZonedDecimal), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    zoned decimal to decimal float abs value */ \
)
   /*!
    * \brief convert from zoned decimal to 64-bit DFP, forcing a positive sign on the DFP value
    *
    * On z/OS, the zoned to DFP conversion op can treat the zoned value as unsigned, forcing a
    * positive sign on the result for free.
    */
OPCODE_MACRO(\
   /* .opcode               = */ zd2ddAbs, \
   /* .name                 = */ "zd2ddAbs", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ ILProp4::BinaryCodedDecimalOp | ILProp4::ConversionHasFraction, \
   /* .dataType             = */ TR::DecimalDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ONE_CHILD(TR::ZonedDecimal), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    zoned decimal to decimal double abs value */ \
)
   /*!
    * \brief convert from zoned decimal to 128-bit DFP, forcing a positive sign on the DFP value
    *
    * On z/OS, the zoned to DFP conversion op can treat the zoned value as unsigned, forcing a
    * positive sign on the result for free.
    */
OPCODE_MACRO(\
   /* .opcode               = */ zd2deAbs, \
   /* .name                 = */ "zd2deAbs", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ ILProp4::BinaryCodedDecimalOp | ILProp4::ConversionHasFraction, \
   /* .dataType             = */ TR::DecimalLongDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ONE_CHILD(TR::ZonedDecimal), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    zoned decimal to decimal long double abs value */ \
)
   /*!
    * \brief convert from 32-bit DFP to zoned decimal, setting the zoned decimal sign code
    *
    * The sign code is specified on the node itself, using setSetSign. Using this op produces
    * faster code than setting the sign separately from the conversion, and unlike a plain
    * DFP setsign (eg. ddAbs or ddSetNegative), this op can also set the sign to 0xf (unsigned)
    * and does on the hardware conversion op on z/OS for free (the op can specify that either
    * the preferred positive or negative signs will be used, eg. 0xc or 0xd, or that there will
    * be no sign, eg. 0xf).
    */
OPCODE_MACRO(\
   /* .opcode               = */ df2zdSetSign, \
   /* .name                 = */ "df2zdSetSign", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ ILProp4::SetSignOnNode | ILProp4::BinaryCodedDecimalOp | ILProp4::ConversionHasFraction | ILProp4::CanHaveStorageReferenceHint, \
   /* .dataType             = */ TR::ZonedDecimal, \
   /* .typeProperties       = */ ILTypeProp::ZonedDecimal, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalFloat), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    decimal float to zoned decimal with forced sign code setting */ \
)
   /*!
    * \brief convert from 64-bit DFP to zoned decimal, setting the zoned decimal sign code
    *
    * The sign code is specified on the node itself, using setSetSign. Using this op produces
    * faster code than setting the sign separately from the conversion, and unlike a plain
    * DFP setsign (eg. ddAbs or ddSetNegative), this op can also set the sign to 0xf (unsigned)
    * and does on the hardware conversion op on z/OS for free (the op can specify that either
    * the preferred positive or negative signs will be used, eg. 0xc or 0xd, or that there will
    * be no sign, eg. 0xf).
    */
OPCODE_MACRO(\
   /* .opcode               = */ dd2zdSetSign, \
   /* .name                 = */ "dd2zdSetSign", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ ILProp4::SetSignOnNode | ILProp4::BinaryCodedDecimalOp | ILProp4::ConversionHasFraction | ILProp4::CanHaveStorageReferenceHint, \
   /* .dataType             = */ TR::ZonedDecimal, \
   /* .typeProperties       = */ ILTypeProp::ZonedDecimal, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalDouble), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    decimal double to zoned decimal with forced sign code setting */ \
)
   /*!
    * \brief convert from 128-bit DFP to zoned decimal, setting the zoned decimal sign code
    *
    * The sign code is specified on the node itself, using setSetSign. Using this op produces
    * faster code than setting the sign separately from the conversion, and unlike a plain
    * DFP setsign (eg. ddAbs or ddSetNegative), this op can also set the sign to 0xf (unsigned)
    * and does on the hardware conversion op on z/OS for free (the op can specify that either
    * the preferred positive or negative signs will be used, eg. 0xc or 0xd, or that there will
    * be no sign, eg. 0xf).
    */
OPCODE_MACRO(\
   /* .opcode               = */ de2zdSetSign, \
   /* .name                 = */ "de2zdSetSign", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ ILProp4::SetSignOnNode | ILProp4::BinaryCodedDecimalOp | ILProp4::ConversionHasFraction | ILProp4::CanHaveStorageReferenceHint, \
   /* .dataType             = */ TR::ZonedDecimal, \
   /* .typeProperties       = */ ILTypeProp::ZonedDecimal, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalLongDouble), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    decimal long double to zoned decimal with forced sign code setting */ \
)
   /*!
    * \brief convert from 32-bit DFP to zoned decimal, cleaning the sign code
    *
    * This op converts from DFP to zoned and also cleans the sign code, ensuring
    * that there will never be a negative zero zoned value.
    */
OPCODE_MACRO(\
   /* .opcode               = */ df2zdClean, \
   /* .name                 = */ "df2zdClean", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ ILProp4::BinaryCodedDecimalOp | ILProp4::ConversionHasFraction | ILProp4::CanHaveStorageReferenceHint, \
   /* .dataType             = */ TR::ZonedDecimal, \
   /* .typeProperties       = */ ILTypeProp::ZonedDecimal, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalFloat), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    decimal float to zoned decimal with forced sign cleaning */ \
)
   /*!
    * \brief convert from 64-bit DFP to zoned decimal, cleaning the sign code
    *
    * This op converts from DFP to zoned and also cleans the sign code, ensuring
    * that there will never be a negative zero zoned value.
    */
OPCODE_MACRO(\
   /* .opcode               = */ dd2zdClean, \
   /* .name                 = */ "dd2zdClean", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ ILProp4::BinaryCodedDecimalOp | ILProp4::ConversionHasFraction | ILProp4::CanHaveStorageReferenceHint, \
   /* .dataType             = */ TR::ZonedDecimal, \
   /* .typeProperties       = */ ILTypeProp::ZonedDecimal, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalDouble), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    decimal double to zoned decimal with forced sign cleaning */ \
)
   /*!
    * \brief convert from 128-bit DFP to zoned decimal, cleaning the sign code
    *
    * This op converts from DFP to zoned and also cleans the sign code, ensuring
    * that there will never be a negative zero zoned value.
    */
OPCODE_MACRO(\
   /* .opcode               = */ de2zdClean, \
   /* .name                 = */ "de2zdClean", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ ILProp4::BinaryCodedDecimalOp | ILProp4::ConversionHasFraction | ILProp4::CanHaveStorageReferenceHint, \
   /* .dataType             = */ TR::ZonedDecimal, \
   /* .typeProperties       = */ ILTypeProp::ZonedDecimal, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalLongDouble), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    decimal long double to zoned decimal with forced sign cleaning */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ udLoad, \
   /* .name                 = */ "udLoad", \
   /* .properties1          = */ ILProp1::LoadVar | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE | ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ ILProp4::BinaryCodedDecimalOp, \
   /* .dataType             = */ TR::UnicodeDecimal, \
   /* .typeProperties       = */ ILTypeProp::UnicodeDecimal, \
   /* .childProperties      = */ ILChildProp::NoChildren, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    unicode decimal load */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ udslLoad, \
   /* .name                 = */ "udslLoad", \
   /* .properties1          = */ ILProp1::LoadVar | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE | ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ ILProp4::BinaryCodedDecimalOp, \
   /* .dataType             = */ TR::UnicodeDecimalSignLeading, \
   /* .typeProperties       = */ ILTypeProp::UnicodeDecimalSignLeading, \
   /* .childProperties      = */ ILChildProp::NoChildren, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    unicode decimal sign leading load */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ udstLoad, \
   /* .name                 = */ "udstLoad", \
   /* .properties1          = */ ILProp1::LoadVar | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE | ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ ILProp4::BinaryCodedDecimalOp, \
   /* .dataType             = */ TR::UnicodeDecimalSignTrailing, \
   /* .typeProperties       = */ ILTypeProp::UnicodeDecimalSignTrailing, \
   /* .childProperties      = */ ILChildProp::NoChildren, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    unicode decimal sign trailing load */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ udLoadi, \
   /* .name                 = */ "udLoadi", \
   /* .properties1          = */ ILProp1::LoadVar | ILProp1::Indirect | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE | ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ ILProp4::BinaryCodedDecimalOp, \
   /* .dataType             = */ TR::UnicodeDecimal, \
   /* .typeProperties       = */ ILTypeProp::UnicodeDecimal, \
   /* .childProperties      = */ ONE_CHILD(TR::Address), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    indirect unicode decimal load */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ udslLoadi, \
   /* .name                 = */ "udslLoadi", \
   /* .properties1          = */ ILProp1::LoadVar | ILProp1::Indirect | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE | ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ ILProp4::BinaryCodedDecimalOp, \
   /* .dataType             = */ TR::UnicodeDecimalSignLeading, \
   /* .typeProperties       = */ ILTypeProp::UnicodeDecimalSignLeading, \
   /* .childProperties      = */ ONE_CHILD(TR::Address), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    indirect unicode decimal sign leading load */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ udstLoadi, \
   /* .name                 = */ "udstLoadi", \
   /* .properties1          = */ ILProp1::LoadVar | ILProp1::Indirect | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE | ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ ILProp4::BinaryCodedDecimalOp, \
   /* .dataType             = */ TR::UnicodeDecimalSignTrailing, \
   /* .typeProperties       = */ ILTypeProp::UnicodeDecimalSignTrailing, \
   /* .childProperties      = */ ONE_CHILD(TR::Address), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    indirect unicode decimal sign trailing load */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ udStore, \
   /* .name                 = */ "udStore", \
   /* .properties1          = */ ILProp1::Store | ILProp1::TreeTop | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeDef, \
   /* .properties4          = */ ILProp4::BinaryCodedDecimalOp | ILProp4::CanHavePaddingAddress | ILProp4::CanUseStoreAsAnAccumulator, \
   /* .dataType             = */ TR::UnicodeDecimal, \
   /* .typeProperties       = */ ILTypeProp::UnicodeDecimal, \
   /* .childProperties      = */ ONE_CHILD(TR::UnicodeDecimal), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    unicode decimal store */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ udslStore, \
   /* .name                 = */ "udslStore", \
   /* .properties1          = */ ILProp1::Store | ILProp1::TreeTop | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeDef, \
   /* .properties4          = */ ILProp4::BinaryCodedDecimalOp | ILProp4::CanUseStoreAsAnAccumulator, \
   /* .dataType             = */ TR::UnicodeDecimalSignLeading, \
   /* .typeProperties       = */ ILTypeProp::UnicodeDecimalSignLeading, \
   /* .childProperties      = */ ONE_CHILD(TR::UnicodeDecimalSignLeading), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    unicode decimal sign leading store */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ udstStore, \
   /* .name                 = */ "udstStore", \
   /* .properties1          = */ ILProp1::Store | ILProp1::TreeTop | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeDef, \
   /* .properties4          = */ ILProp4::BinaryCodedDecimalOp | ILProp4::CanUseStoreAsAnAccumulator, \
   /* .dataType             = */ TR::UnicodeDecimalSignTrailing, \
   /* .typeProperties       = */ ILTypeProp::UnicodeDecimalSignTrailing, \
   /* .childProperties      = */ ONE_CHILD(TR::UnicodeDecimalSignTrailing), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    unicode decimal sign trailing store */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ udStorei, \
   /* .name                 = */ "udStorei", \
   /* .properties1          = */ ILProp1::Store | ILProp1::Indirect | ILProp1::TreeTop | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeDef, \
   /* .properties4          = */ ILProp4::BinaryCodedDecimalOp | ILProp4::CanHavePaddingAddress | ILProp4::CanUseStoreAsAnAccumulator, \
   /* .dataType             = */ TR::UnicodeDecimal, \
   /* .typeProperties       = */ ILTypeProp::UnicodeDecimal, \
   /* .childProperties      = */ TWO_CHILD(TR::Address, TR::UnicodeDecimal), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    indirect unicode decimal store */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ udslStorei, \
   /* .name                 = */ "udslStorei", \
   /* .properties1          = */ ILProp1::Store | ILProp1::Indirect | ILProp1::TreeTop | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeDef, \
   /* .properties4          = */ ILProp4::BinaryCodedDecimalOp | ILProp4::CanUseStoreAsAnAccumulator, \
   /* .dataType             = */ TR::UnicodeDecimalSignLeading, \
   /* .typeProperties       = */ ILTypeProp::UnicodeDecimalSignLeading, \
   /* .childProperties      = */ TWO_CHILD(TR::Address, TR::UnicodeDecimalSignLeading), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    indirect unicode decimal sign leading store */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ udstStorei, \
   /* .name                 = */ "udstStorei", \
   /* .properties1          = */ ILProp1::Store | ILProp1::Indirect | ILProp1::TreeTop | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeDef, \
   /* .properties4          = */ ILProp4::BinaryCodedDecimalOp | ILProp4::CanUseStoreAsAnAccumulator, \
   /* .dataType             = */ TR::UnicodeDecimalSignTrailing, \
   /* .typeProperties       = */ ILTypeProp::UnicodeDecimalSignTrailing, \
   /* .childProperties      = */ TWO_CHILD(TR::Address, TR::UnicodeDecimalSignTrailing), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    indirect unicode decimal sign trailing store */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ pd2ud, \
   /* .name                 = */ "pd2ud", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ ILProp4::BinaryCodedDecimalOp | ILProp4::CanHaveStorageReferenceHint, \
   /* .dataType             = */ TR::UnicodeDecimal, \
   /* .typeProperties       = */ ILTypeProp::UnicodeDecimal, \
   /* .childProperties      = */ ONE_CHILD(TR::PackedDecimal), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    packed decimal to unicode decimal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ pd2udsl, \
   /* .name                 = */ "pd2udsl", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ ILProp4::BinaryCodedDecimalOp | ILProp4::CanHaveStorageReferenceHint, \
   /* .dataType             = */ TR::UnicodeDecimalSignLeading, \
   /* .typeProperties       = */ ILTypeProp::UnicodeDecimalSignLeading, \
   /* .childProperties      = */ ONE_CHILD(TR::PackedDecimal), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    packed decimal to unicode decimal sign leading */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ pd2udst, \
   /* .name                 = */ "pd2udst", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ ILProp4::BinaryCodedDecimalOp | ILProp4::CanHaveStorageReferenceHint, \
   /* .dataType             = */ TR::UnicodeDecimalSignTrailing, \
   /* .typeProperties       = */ ILTypeProp::UnicodeDecimalSignTrailing, \
   /* .childProperties      = */ ONE_CHILD(TR::PackedDecimal), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    packed decimal to unicode decimal sign trailing */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ udsl2ud, \
   /* .name                 = */ "udsl2ud", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ ILProp4::BinaryCodedDecimalOp | ILProp4::CanHaveStorageReferenceHint, \
   /* .dataType             = */ TR::UnicodeDecimal, \
   /* .typeProperties       = */ ILTypeProp::UnicodeDecimal, \
   /* .childProperties      = */ ONE_CHILD(TR::UnicodeDecimalSignLeading), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    unicode decimal sign leading to unicode decimal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ udst2ud, \
   /* .name                 = */ "udst2ud", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ ILProp4::BinaryCodedDecimalOp | ILProp4::CanHaveStorageReferenceHint, \
   /* .dataType             = */ TR::UnicodeDecimal, \
   /* .typeProperties       = */ ILTypeProp::UnicodeDecimal, \
   /* .childProperties      = */ ONE_CHILD(TR::UnicodeDecimalSignTrailing), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    unicode decimal sign trailing to unicode decimal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ ud2pd, \
   /* .name                 = */ "ud2pd", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ ILProp4::BinaryCodedDecimalOp | ILProp4::CanHaveStorageReferenceHint, \
   /* .dataType             = */ TR::PackedDecimal, \
   /* .typeProperties       = */ ILTypeProp::PackedDecimal, \
   /* .childProperties      = */ ONE_CHILD(TR::UnicodeDecimal), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    unicode decimal to packed decimal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ udsl2pd, \
   /* .name                 = */ "udsl2pd", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ ILProp4::BinaryCodedDecimalOp | ILProp4::CanHaveStorageReferenceHint, \
   /* .dataType             = */ TR::PackedDecimal, \
   /* .typeProperties       = */ ILTypeProp::PackedDecimal, \
   /* .childProperties      = */ ONE_CHILD(TR::UnicodeDecimalSignLeading), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    unicode decimal sign leading to packed decimal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ udst2pd, \
   /* .name                 = */ "udst2pd", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ ILProp4::BinaryCodedDecimalOp | ILProp4::CanHaveStorageReferenceHint, \
   /* .dataType             = */ TR::PackedDecimal, \
   /* .typeProperties       = */ ILTypeProp::PackedDecimal, \
   /* .childProperties      = */ ONE_CHILD(TR::UnicodeDecimalSignTrailing), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    unicode decimal sign trailing to packed decimal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ pdload, \
   /* .name                 = */ "pdload", \
   /* .properties1          = */ ILProp1::LoadVar | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE | ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ ILProp4::BinaryCodedDecimalOp, \
   /* .dataType             = */ TR::PackedDecimal, \
   /* .typeProperties       = */ ILTypeProp::PackedDecimal, \
   /* .childProperties      = */ ILChildProp::NoChildren, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    packed decimal load */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ pdloadi, \
   /* .name                 = */ "pdloadi", \
   /* .properties1          = */ ILProp1::LoadVar | ILProp1::Indirect | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE | ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ ILProp4::BinaryCodedDecimalOp, \
   /* .dataType             = */ TR::PackedDecimal, \
   /* .typeProperties       = */ ILTypeProp::PackedDecimal, \
   /* .childProperties      = */ ONE_CHILD(TR::Address), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    indirect packed decimal load */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ pdstore, \
   /* .name                 = */ "pdstore", \
   /* .properties1          = */ ILProp1::Store | ILProp1::TreeTop | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeDef, \
   /* .properties4          = */ ILProp4::BinaryCodedDecimalOp | ILProp4::CanUseStoreAsAnAccumulator, \
   /* .dataType             = */ TR::PackedDecimal, \
   /* .typeProperties       = */ ILTypeProp::PackedDecimal, \
   /* .childProperties      = */ ONE_CHILD(TR::PackedDecimal), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    packed decimal store */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ pdstorei, \
   /* .name                 = */ "pdstorei", \
   /* .properties1          = */ ILProp1::Store | ILProp1::Indirect | ILProp1::TreeTop | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeDef, \
   /* .properties4          = */ ILProp4::BinaryCodedDecimalOp | ILProp4::CanUseStoreAsAnAccumulator, \
   /* .dataType             = */ TR::PackedDecimal, \
   /* .typeProperties       = */ ILTypeProp::PackedDecimal, \
   /* .childProperties      = */ TWO_CHILD(TR::Address, TR::PackedDecimal), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    indirect packed decimal store */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ pdadd, \
   /* .name                 = */ "pdadd", \
   /* .properties1          = */ ILProp1::Commutative | ILProp1::Associative | ILProp1::Add, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ ILProp4::BinaryCodedDecimalOp | ILProp4::CanHaveStorageReferenceHint, \
   /* .dataType             = */ TR::PackedDecimal, \
   /* .typeProperties       = */ ILTypeProp::PackedDecimal, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::PackedDecimal), \
   /* .swapChildrenOpCode   = */ TR::pdadd, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    packed decimal add */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ pdsub, \
   /* .name                 = */ "pdsub", \
   /* .properties1          = */ ILProp1::Sub, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ ILProp4::BinaryCodedDecimalOp | ILProp4::CanHaveStorageReferenceHint, \
   /* .dataType             = */ TR::PackedDecimal, \
   /* .typeProperties       = */ ILTypeProp::PackedDecimal, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::PackedDecimal), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    packed decimal subtract */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ pdmul, \
   /* .name                 = */ "pdmul", \
   /* .properties1          = */ ILProp1::Commutative | ILProp1::Associative | ILProp1::Mul, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ ILProp4::BinaryCodedDecimalOp | ILProp4::CanHaveStorageReferenceHint, \
   /* .dataType             = */ TR::PackedDecimal, \
   /* .typeProperties       = */ ILTypeProp::PackedDecimal, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::PackedDecimal), \
   /* .swapChildrenOpCode   = */ TR::pdmul, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    packed decimal multiply */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ pddiv, \
   /* .name                 = */ "pddiv", \
   /* .properties1          = */ ILProp1::Div, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ ILProp4::BinaryCodedDecimalOp | ILProp4::CanHaveStorageReferenceHint, \
   /* .dataType             = */ TR::PackedDecimal, \
   /* .typeProperties       = */ ILTypeProp::PackedDecimal, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::PackedDecimal), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    packed decimal divide */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ pdrem, \
   /* .name                 = */ "pdrem", \
   /* .properties1          = */ ILProp1::Rem, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE | ILProp2::MayUseSystemStack, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ ILProp4::BinaryCodedDecimalOp | ILProp4::CanHaveStorageReferenceHint, \
   /* .dataType             = */ TR::PackedDecimal, \
   /* .typeProperties       = */ ILTypeProp::PackedDecimal, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::PackedDecimal), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    packed decimal remainder */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ pdneg, \
   /* .name                 = */ "pdneg", \
   /* .properties1          = */ ILProp1::Neg, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ ILProp4::BinaryCodedDecimalOp | ILProp4::CanHaveStorageReferenceHint, \
   /* .dataType             = */ TR::PackedDecimal, \
   /* .typeProperties       = */ ILTypeProp::PackedDecimal, \
   /* .childProperties      = */ ONE_CHILD(TR::PackedDecimal), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    packed decimal negation */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ pdabs, \
   /* .name                 = */ "pdabs", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::Abs, \
   /* .properties4          = */ ILProp4::BinaryCodedDecimalOp | ILProp4::CanHaveStorageReferenceHint, \
   /* .dataType             = */ TR::PackedDecimal, \
   /* .typeProperties       = */ ILTypeProp::PackedDecimal, \
   /* .childProperties      = */ ONE_CHILD(TR::PackedDecimal), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    packed decimal absolute value */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ pdshr, \
   /* .name                 = */ "pdshr", \
   /* .properties1          = */ ILProp1::RightShift, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ ILProp4::BinaryCodedDecimalOp | ILProp4::CanHaveStorageReferenceHint, \
   /* .dataType             = */ TR::PackedDecimal, \
   /* .typeProperties       = */ ILTypeProp::PackedDecimal, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::PackedDecimal), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    packed decimal shift right */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ pdshl, \
   /* .name                 = */ "pdshl", \
   /* .properties1          = */ ILProp1::LeftShift, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ ILProp4::BinaryCodedDecimalOp | ILProp4::CanHaveStorageReferenceHint, \
   /* .dataType             = */ TR::PackedDecimal, \
   /* .typeProperties       = */ ILTypeProp::PackedDecimal, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::PackedDecimal), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    packed decimal shift left */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ pdshrSetSign, \
   /* .name                 = */ "pdshrSetSign", \
   /* .properties1          = */ ILProp1::RightShift, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ ILProp4::SetSign | ILProp4::BinaryCodedDecimalOp | ILProp4::CanHaveStorageReferenceHint, \
   /* .dataType             = */ TR::PackedDecimal, \
   /* .typeProperties       = */ ILTypeProp::PackedDecimal, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::PackedDecimal), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    packed decimal shift right and set the sign code */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ pdshlSetSign, \
   /* .name                 = */ "pdshlSetSign", \
   /* .properties1          = */ ILProp1::LeftShift, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ ILProp4::SetSign | ILProp4::BinaryCodedDecimalOp | ILProp4::CanHaveStorageReferenceHint, \
   /* .dataType             = */ TR::PackedDecimal, \
   /* .typeProperties       = */ ILTypeProp::PackedDecimal, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::PackedDecimal), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    packed decimal shift left and set the sign code */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ pdshlOverflow, \
   /* .name                 = */ "pdshlOverflow", \
   /* .properties1          = */ ILProp1::LeftShift, \
   /* .properties2          = */ ILProp2::ValueNumberShare, \
   /* .properties3          = */ ILProp3::LikeUse, \
   /* .properties4          = */ ILProp4::BinaryCodedDecimalOp | ILProp4::CanHaveStorageReferenceHint, \
   /* .dataType             = */ TR::PackedDecimal, \
   /* .typeProperties       = */ ILTypeProp::PackedDecimal, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::PackedDecimal), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    packed decimal shift left with overflow detection */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ pdchk, \
   /* .name                 = */ "pdchk", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ ILProp4::BinaryCodedDecimalOp, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ ONE_CHILD(TR::PackedDecimal), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    packed decimal validity checking */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ pd2i, \
   /* .name                 = */ "pd2i", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ ILProp4::BinaryCodedDecimalOp, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ ONE_CHILD(TR::PackedDecimal), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    packed decimal to signed integer (SINT32) */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ pd2iOverflow, \
   /* .name                 = */ "pd2iOverflow", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ ILProp4::BinaryCodedDecimalOp, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ ONE_CHILD(TR::PackedDecimal), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    packed decimal to signed integer with overflow on (SINT32) */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ pd2iu, \
   /* .name                 = */ "pd2iu", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ ILProp4::BinaryCodedDecimalOp, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Unsigned, \
   /* .childProperties      = */ ONE_CHILD(TR::PackedDecimal), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    packed decimal to unsigned integer (UINT32) */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ i2pd, \
   /* .name                 = */ "i2pd", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ ILProp4::BinaryCodedDecimalOp | ILProp4::CanHaveStorageReferenceHint, \
   /* .dataType             = */ TR::PackedDecimal, \
   /* .typeProperties       = */ ILTypeProp::PackedDecimal, \
   /* .childProperties      = */ ONE_CHILD(TR::Int32), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    signed integer (SINT32) to packed decimal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ iu2pd, \
   /* .name                 = */ "iu2pd", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ ILProp4::BinaryCodedDecimalOp | ILProp4::CanHaveStorageReferenceHint, \
   /* .dataType             = */ TR::PackedDecimal, \
   /* .typeProperties       = */ ILTypeProp::PackedDecimal, \
   /* .childProperties      = */ ONE_CHILD(TR::Int32), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    unsigned integer (UINT32) to packed decimal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ pd2l, \
   /* .name                 = */ "pd2l", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ ILProp4::BinaryCodedDecimalOp, \
   /* .dataType             = */ TR::Int64, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Integer, \
   /* .childProperties      = */ ONE_CHILD(TR::PackedDecimal), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    packed decimal to signed long (SINT64) */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ pd2lOverflow, \
   /* .name                 = */ "pd2lOverflow", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ ILProp4::BinaryCodedDecimalOp, \
   /* .dataType             = */ TR::Int64, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Integer, \
   /* .childProperties      = */ ONE_CHILD(TR::PackedDecimal), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    packed decimal to signed integer with overflow on (SINT64) */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ pd2lu, \
   /* .name                 = */ "pd2lu", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ ILProp4::BinaryCodedDecimalOp, \
   /* .dataType             = */ TR::Int64, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Unsigned, \
   /* .childProperties      = */ ONE_CHILD(TR::Int64), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    packed decimal to unsigned long (UINT64) */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ l2pd, \
   /* .name                 = */ "l2pd", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ ILProp4::BinaryCodedDecimalOp | ILProp4::CanHaveStorageReferenceHint, \
   /* .dataType             = */ TR::PackedDecimal, \
   /* .typeProperties       = */ ILTypeProp::PackedDecimal, \
   /* .childProperties      = */ ONE_CHILD(TR::Int64), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    signed long (SINT64) to packed decimal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ lu2pd, \
   /* .name                 = */ "lu2pd", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ ILProp4::BinaryCodedDecimalOp | ILProp4::CanHaveStorageReferenceHint, \
   /* .dataType             = */ TR::PackedDecimal, \
   /* .typeProperties       = */ ILTypeProp::PackedDecimal, \
   /* .childProperties      = */ ONE_CHILD(TR::Int64), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    unsigned long (UINT64) to packed decimal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ pd2f, \
   /* .name                 = */ "pd2f", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ ILProp4::BinaryCodedDecimalOp | ILProp4::ConversionHasFraction, \
   /* .dataType             = */ TR::Float, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Floating_Point, \
   /* .childProperties      = */ ONE_CHILD(TR::PackedDecimal), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    packed decimal to float */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ pd2d, \
   /* .name                 = */ "pd2d", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ ILProp4::BinaryCodedDecimalOp | ILProp4::ConversionHasFraction, \
   /* .dataType             = */ TR::Double, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Floating_Point, \
   /* .childProperties      = */ ONE_CHILD(TR::PackedDecimal), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    packed decimal to double */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ f2pd, \
   /* .name                 = */ "f2pd", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ ILProp4::BinaryCodedDecimalOp | ILProp4::ConversionHasFraction | ILProp4::CanHaveStorageReferenceHint, \
   /* .dataType             = */ TR::PackedDecimal, \
   /* .typeProperties       = */ ILTypeProp::PackedDecimal, \
   /* .childProperties      = */ ONE_CHILD(TR::Float), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    float to packed decimal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ d2pd, \
   /* .name                 = */ "d2pd", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ ILProp4::BinaryCodedDecimalOp | ILProp4::ConversionHasFraction | ILProp4::CanHaveStorageReferenceHint, \
   /* .dataType             = */ TR::PackedDecimal, \
   /* .typeProperties       = */ ILTypeProp::PackedDecimal, \
   /* .childProperties      = */ ONE_CHILD(TR::Double), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    double to packed decimal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ pdcmpeq, \
   /* .name                 = */ "pdcmpeq", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::CompareTrueIfEqual, \
   /* .properties4          = */ ILProp4::BinaryCodedDecimalOp, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::PackedDecimal), \
   /* .swapChildrenOpCode   = */ TR::pdcmpeq, \
   /* .reverseBranchOpCode  = */ TR::pdcmpne, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    packed decimal compare if equal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ pdcmpne, \
   /* .name                 = */ "pdcmpne", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess | ILProp3::CompareTrueIfGreater, \
   /* .properties4          = */ ILProp4::BinaryCodedDecimalOp, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::PackedDecimal), \
   /* .swapChildrenOpCode   = */ TR::pdcmpne, \
   /* .reverseBranchOpCode  = */ TR::pdcmpeq, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    packed decimal compare if not equal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ pdcmplt, \
   /* .name                 = */ "pdcmplt", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess, \
   /* .properties4          = */ ILProp4::BinaryCodedDecimalOp, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::PackedDecimal), \
   /* .swapChildrenOpCode   = */ TR::pdcmpgt, \
   /* .reverseBranchOpCode  = */ TR::pdcmpge, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    packed decimal compare if less than */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ pdcmpge, \
   /* .name                 = */ "pdcmpge", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::CompareTrueIfGreater | ILProp3::CompareTrueIfEqual, \
   /* .properties4          = */ ILProp4::BinaryCodedDecimalOp, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::PackedDecimal), \
   /* .swapChildrenOpCode   = */ TR::pdcmple, \
   /* .reverseBranchOpCode  = */ TR::pdcmplt, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    packed decimal compare if greater than or equal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ pdcmpgt, \
   /* .name                 = */ "pdcmpgt", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::CompareTrueIfGreater, \
   /* .properties4          = */ ILProp4::BinaryCodedDecimalOp, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::PackedDecimal), \
   /* .swapChildrenOpCode   = */ TR::pdcmplt, \
   /* .reverseBranchOpCode  = */ TR::pdcmple, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    packed decimal compare if greater than */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ pdcmple, \
   /* .name                 = */ "pdcmple", \
   /* .properties1          = */ ILProp1::BooleanCompare, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::CompareTrueIfLess | ILProp3::CompareTrueIfEqual, \
   /* .properties4          = */ ILProp4::BinaryCodedDecimalOp, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ TWO_SAME_CHILD(TR::PackedDecimal), \
   /* .swapChildrenOpCode   = */ TR::pdcmpge, \
   /* .reverseBranchOpCode  = */ TR::pdcmpgt, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    packed decimal compare if less than or equal */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ pdclean, \
   /* .name                 = */ "pdclean", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ ILProp4::BinaryCodedDecimalOp | ILProp4::CanHaveStorageReferenceHint, \
   /* .dataType             = */ TR::PackedDecimal, \
   /* .typeProperties       = */ ILTypeProp::PackedDecimal, \
   /* .childProperties      = */ ONE_CHILD(TR::PackedDecimal), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    set the sign code to the preferred sign code and force 0 to the positive sign code */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ pdclear, \
   /* .name                 = */ "pdclear", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::SkipDynamicLitPoolOnInts, \
   /* .properties4          = */ ILProp4::BinaryCodedDecimalOp | ILProp4::CanHaveStorageReferenceHint, \
   /* .dataType             = */ TR::PackedDecimal, \
   /* .typeProperties       = */ ILTypeProp::PackedDecimal, \
   /* .childProperties      = */ ONE_CHILD(TR::PackedDecimal), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    clear the specified range of packed decimal digits */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ pdclearSetSign, \
   /* .name                 = */ "pdclearSetSign", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ ILProp3::SkipDynamicLitPoolOnInts, \
   /* .properties4          = */ ILProp4::SetSignOnNode | ILProp4::BinaryCodedDecimalOp | ILProp4::CanHaveStorageReferenceHint, \
   /* .dataType             = */ TR::PackedDecimal, \
   /* .typeProperties       = */ ILTypeProp::PackedDecimal, \
   /* .childProperties      = */ ONE_CHILD(TR::PackedDecimal), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    clear the specified range of packed decimal digits and set the sign to the specified value */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ pdSetSign, \
   /* .name                 = */ "pdSetSign", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ ILProp4::SetSign | ILProp4::BinaryCodedDecimalOp | ILProp4::CanHaveStorageReferenceHint, \
   /* .dataType             = */ TR::PackedDecimal, \
   /* .typeProperties       = */ ILTypeProp::PackedDecimal, \
   /* .childProperties      = */ ONE_CHILD(TR::PackedDecimal), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    packed decimal forced sign code setting */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ pdModifyPrecision, \
   /* .name                 = */ "pdModifyPrecision", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ ILProp4::ModifyPrecision | ILProp4::BinaryCodedDecimalOp | ILProp4::CanHaveStorageReferenceHint, \
   /* .dataType             = */ TR::PackedDecimal, \
   /* .typeProperties       = */ ILTypeProp::PackedDecimal, \
   /* .childProperties      = */ ONE_CHILD(TR::PackedDecimal), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    packed decimal modify precision */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ countDigits, \
   /* .name                 = */ "countDigits", \
   /* .properties1          = */ 0, \
   /* .properties2          = */ 0, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::Int32, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Integer, \
   /* .childProperties      = */ ONE_CHILD(TR::PackedDecimal), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    Inline code for counting digits of an integer/long value */ \
)

   /*!
    * \brief convert from packed decimal to 32-bit DFP
    */
OPCODE_MACRO(\
   /* .opcode               = */ pd2df, \
   /* .name                 = */ "pd2df", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ ILProp4::BinaryCodedDecimalOp | ILProp4::ConversionHasFraction, \
   /* .dataType             = */ TR::DecimalFloat, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ONE_CHILD(TR::PackedDecimal), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    packed decimal to decimal float */ \
)
   /*!
    * \brief convert from packed decimal to 32-bit DFP, forcing a positive sign on the DFP value
    *
    * On z/OS, the packed to DFP conversion op can ignore the packed sign value, forcing a
    * positive sign on the result for free.
    */
OPCODE_MACRO(\
   /* .opcode               = */ pd2dfAbs, \
   /* .name                 = */ "pd2dfAbs", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ ILProp4::BinaryCodedDecimalOp | ILProp4::ConversionHasFraction, \
   /* .dataType             = */ TR::DecimalFloat, \
   /* .typeProperties       = */ ILTypeProp::Size_4 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ONE_CHILD(TR::PackedDecimal), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    packed decimal to decimal float abs value */ \
)
   /*!
    * \brief convert from 32-bit DFP to packed decimal
    */
OPCODE_MACRO(\
   /* .opcode               = */ df2pd, \
   /* .name                 = */ "df2pd", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ ILProp4::BinaryCodedDecimalOp | ILProp4::ConversionHasFraction | ILProp4::CanHaveStorageReferenceHint, \
   /* .dataType             = */ TR::PackedDecimal, \
   /* .typeProperties       = */ ILTypeProp::PackedDecimal, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalFloat), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    decimal float to packed decimal */ \
)
   /*!
    * \brief convert from 32-bit DFP to packed decimal, setting the packed decimal sign code
    *
    * The sign code is specified on the node itself, using setSetSign. Using this op produces
    * faster code than setting the sign separately from the conversion, and unlike a plain
    * DFP setsign (eg. ddAbs or ddSetNegative), this op can also set the sign to 0xf (unsigned)
    * and does so in one IL instruction. Keeping the setsign op separate from the conversion op
    * makes it less obvious what's going on, especially for a setsign of 0xf (where the sign
    * can be set for free as part of the conversion, as long as the DFP value is positive).
    */
OPCODE_MACRO(\
   /* .opcode               = */ df2pdSetSign, \
   /* .name                 = */ "df2pdSetSign", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ ILProp4::SetSignOnNode | ILProp4::BinaryCodedDecimalOp | ILProp4::ConversionHasFraction | ILProp4::CanHaveStorageReferenceHint, \
   /* .dataType             = */ TR::PackedDecimal, \
   /* .typeProperties       = */ ILTypeProp::PackedDecimal, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalFloat), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    decimal float to packed decimal, setting the sign */ \
)
   /*!
    * \brief convert from 32-bit DFP to packed decimal, cleaning the sign code
    *
    * This op converts from DFP to packed and also cleans the sign code, ensuring
    * that there will never be a negative zero packed value.
    */
OPCODE_MACRO(\
   /* .opcode               = */ df2pdClean, \
   /* .name                 = */ "df2pdClean", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ ILProp4::BinaryCodedDecimalOp | ILProp4::ConversionHasFraction | ILProp4::CanHaveStorageReferenceHint, \
   /* .dataType             = */ TR::PackedDecimal, \
   /* .typeProperties       = */ ILTypeProp::PackedDecimal, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalFloat), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    decimal float to packed decimal with forced sign cleaning */ \
)
   /*!
    * \brief convert from packed decimal to 64-bit DFP
    */
OPCODE_MACRO(\
   /* .opcode               = */ pd2dd, \
   /* .name                 = */ "pd2dd", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ ILProp4::BinaryCodedDecimalOp | ILProp4::ConversionHasFraction, \
   /* .dataType             = */ TR::DecimalDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ONE_CHILD(TR::PackedDecimal), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    packed decimal to decimal double */ \
)
   /*!
    * \brief convert from packed decimal to 64-bit DFP, forcing a positive sign on the DFP value
    *
    * On z/OS, the packed to DFP conversion op can ignore the packed sign value, forcing a
    * positive sign on the result for free.
    */
OPCODE_MACRO(\
   /* .opcode               = */ pd2ddAbs, \
   /* .name                 = */ "pd2ddAbs", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ ILProp4::BinaryCodedDecimalOp | ILProp4::ConversionHasFraction, \
   /* .dataType             = */ TR::DecimalDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_8 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ONE_CHILD(TR::PackedDecimal), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    packed decimal to decimal double abs value */ \
)
   /*!
    * \brief convert from 64-bit DFP to packed decimal
    */
OPCODE_MACRO(\
   /* .opcode               = */ dd2pd, \
   /* .name                 = */ "dd2pd", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ ILProp4::BinaryCodedDecimalOp | ILProp4::ConversionHasFraction | ILProp4::CanHaveStorageReferenceHint, \
   /* .dataType             = */ TR::PackedDecimal, \
   /* .typeProperties       = */ ILTypeProp::PackedDecimal, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalDouble), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    decimal double to packed decimal */ \
)
   /*!
    * \brief convert from 64-bit DFP to packed decimal, setting the packed decimal sign code
    *
    * The sign code is specified on the node itself, using setSetSign. Using this op produces
    * faster code than setting the sign separately from the conversion, and unlike a plain
    * DFP setsign (eg. ddAbs or ddSetNegative), this op can also set the sign to 0xf (unsigned)
    * and does so in one IL instruction. Keeping the setsign op separate from the conversion op
    * makes it less obvious what's going on, especially for a setsign of 0xf (where the sign
    * can be set for free as part of the conversion, as long as the DFP value is positive).
    */
OPCODE_MACRO(\
   /* .opcode               = */ dd2pdSetSign, \
   /* .name                 = */ "dd2pdSetSign", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ ILProp4::SetSignOnNode | ILProp4::BinaryCodedDecimalOp | ILProp4::ConversionHasFraction | ILProp4::CanHaveStorageReferenceHint, \
   /* .dataType             = */ TR::PackedDecimal, \
   /* .typeProperties       = */ ILTypeProp::PackedDecimal, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalDouble), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    decimal double to packed decimal, setting the sign */ \
)
   /*!
    * \brief convert from 64-bit DFP to packed decimal, cleaning the sign code
    *
    * This op converts from DFP to packed and also cleans the sign code, ensuring
    * that there will never be a negative zero packed value.
    */
OPCODE_MACRO(\
   /* .opcode               = */ dd2pdClean, \
   /* .name                 = */ "dd2pdClean", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ ILProp4::BinaryCodedDecimalOp | ILProp4::ConversionHasFraction | ILProp4::CanHaveStorageReferenceHint, \
   /* .dataType             = */ TR::PackedDecimal, \
   /* .typeProperties       = */ ILTypeProp::PackedDecimal, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalDouble), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    decimal double to packed decimal with forced sign cleaning */ \
)
   /*!
    * \brief convert from packed decimal to 128-bit DFP
    */
OPCODE_MACRO(\
   /* .opcode               = */ pd2de, \
   /* .name                 = */ "pd2de", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ ILProp4::BinaryCodedDecimalOp | ILProp4::ConversionHasFraction, \
   /* .dataType             = */ TR::DecimalLongDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ONE_CHILD(TR::PackedDecimal), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    packed decimal to decimal long double */ \
)
   /*!
    * \brief convert from packed decimal to 128-bit DFP, forcing a positive sign on the DFP value
    *
    * On z/OS, the packed to DFP conversion op can ignore the packed sign value, forcing a
    * positive sign on the result for free.
    */
OPCODE_MACRO(\
   /* .opcode               = */ pd2deAbs, \
   /* .name                 = */ "pd2deAbs", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ ILProp4::BinaryCodedDecimalOp | ILProp4::ConversionHasFraction, \
   /* .dataType             = */ TR::DecimalLongDouble, \
   /* .typeProperties       = */ ILTypeProp::Size_16 | ILTypeProp::Floating_Point | ILTypeProp::DFP, \
   /* .childProperties      = */ ONE_CHILD(TR::PackedDecimal), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    packed decimal to decimal long double abs value */ \
)
   /*!
    * \brief convert from 128-bit DFP to packed decimal
    */
OPCODE_MACRO(\
   /* .opcode               = */ de2pd, \
   /* .name                 = */ "de2pd", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ ILProp4::BinaryCodedDecimalOp | ILProp4::ConversionHasFraction | ILProp4::CanHaveStorageReferenceHint, \
   /* .dataType             = */ TR::PackedDecimal, \
   /* .typeProperties       = */ ILTypeProp::PackedDecimal, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalLongDouble), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    decimal long double to packed decimal */ \
)
   /*!
    * \brief convert from 128-bit DFP to packed decimal, setting the packed decimal sign code
    *
    * The sign code is specified on the node itself, using setSetSign. Using this op produces
    * faster code than setting the sign separately from the conversion, and unlike a plain
    * DFP setsign (eg. ddAbs or ddSetNegative), this op can also set the sign to 0xf (unsigned)
    * and does so in one IL instruction. Keeping the setsign op separate from the conversion op
    * makes it less obvious what's going on, especially for a setsign of 0xf (where the sign
    * can be set for free as part of the conversion, as long as the DFP value is positive).
    */
OPCODE_MACRO(\
   /* .opcode               = */ de2pdSetSign, \
   /* .name                 = */ "de2pdSetSign", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ ILProp4::SetSignOnNode | ILProp4::BinaryCodedDecimalOp | ILProp4::ConversionHasFraction | ILProp4::CanHaveStorageReferenceHint, \
   /* .dataType             = */ TR::PackedDecimal, \
   /* .typeProperties       = */ ILTypeProp::PackedDecimal, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalLongDouble), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    decimal long double to packed decimal, setting the sign */ \
)
   /*!
    * \brief convert from 128-bit DFP to packed decimal, cleaning the sign code
    *
    * This op converts from DFP to packed and also cleans the sign code, ensuring
    * that there will never be a negative zero packed value.
    */
OPCODE_MACRO(\
   /* .opcode               = */ de2pdClean, \
   /* .name                 = */ "de2pdClean", \
   /* .properties1          = */ ILProp1::Conversion, \
   /* .properties2          = */ ILProp2::ValueNumberShare | ILProp2::SupportedForPRE, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ ILProp4::BinaryCodedDecimalOp | ILProp4::ConversionHasFraction | ILProp4::CanHaveStorageReferenceHint, \
   /* .dataType             = */ TR::PackedDecimal, \
   /* .typeProperties       = */ ILTypeProp::PackedDecimal, \
   /* .childProperties      = */ ONE_CHILD(TR::DecimalLongDouble), \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          =    decimal long double to packed decimal with forced sign cleaning */ \
)
OPCODE_MACRO(\
   /* .opcode               = */ BCDCHK, \
   /* .name                 = */ "BCDCHK", \
   /* .properties1          = */ ILProp1::TreeTop | ILProp1::HasSymbolRef, \
   /* .properties2          = */ ILProp2::CanRaiseException | ILProp2::Check | ILProp2::MayUseSystemStack, \
   /* .properties3          = */ 0, \
   /* .properties4          = */ 0, \
   /* .dataType             = */ TR::NoType, \
   /* .typeProperties       = */ 0, \
   /* .childProperties      = */ ILChildProp::Unspecified, \
   /* .swapChildrenOpCode   = */ TR::BadILOp, \
   /* .reverseBranchOpCode  = */ TR::BadILOp, \
   /* .booleanCompareOpCode = */ TR::BadILOp, \
   /* .ifCompareOpCode      = */ TR::BadILOp, \
   /* .description          = */ \
)
