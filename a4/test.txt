T1.class
Soot started on Tue Apr 23 21:33:31 IST 2024
UDMS: 
	<T1: int foo(int,int)>
	<T1: void main(java.lang.String[])>
r1 := @parameter0: java.lang.String[] usebox: class soot.jimple.ParameterRef
b3 = 1 usebox: class soot.jimple.IntConstant
b4 = 2 usebox: class soot.jimple.IntConstant
b5 = 3 usebox: class soot.jimple.IntConstant
i6 = b3 + 1 usebox: class soot.jimple.internal.JAddExpr
i6 = b3 + 1 usebox: class soot.jimple.IntConstant
$i0 = b4 * 2 usebox: class soot.jimple.internal.JMulExpr
$i0 = b4 * 2 usebox: class soot.jimple.IntConstant
i7 = $i0 * i6 usebox: class soot.jimple.internal.JMulExpr
$i1 = 1 * b5 usebox: class soot.jimple.internal.JMulExpr
$i1 = 1 * b5 usebox: class soot.jimple.IntConstant
$i2 = b5 + $i1 usebox: class soot.jimple.internal.JAddExpr
i8 = $i2 - 2 usebox: class soot.jimple.internal.JSubExpr
i8 = $i2 - 2 usebox: class soot.jimple.IntConstant
i9 = i6 + i8 usebox: class soot.jimple.internal.JAddExpr
i0 := @parameter0: int usebox: class soot.jimple.ParameterRef
i1 := @parameter1: int usebox: class soot.jimple.ParameterRef
i4 = i3 + 1 usebox: class soot.jimple.internal.JAddExpr
i4 = i3 + 1 usebox: class soot.jimple.IntConstant
if i4 != i1 goto $i2 = i0 + i1 usebox: class soot.jimple.internal.JNeExpr
i5 = i4 + 1 usebox: class soot.jimple.internal.JAddExpr
i5 = i4 + 1 usebox: class soot.jimple.IntConstant
$i2 = i0 + i1 usebox: class soot.jimple.internal.JAddExpr
i10 = staticinvoke <T1: int foo(int,int)>(i6, i8) usebox: class soot.jimple.internal.JStaticInvokeExpr
i11 = i10 + i9 usebox: class soot.jimple.internal.JAddExpr
i12 = i6 * i11 usebox: class soot.jimple.internal.JMulExpr
virtualinvoke $r0.<java.io.PrintStream: void println(int)>(i12) $r0, class soot.jimple.internal.JimpleLocal
virtualinvoke $r0.<java.io.PrintStream: void println(int)>(i12) usebox: class soot.jimple.internal.JVirtualInvokeExpr
impure methods: 
<T1: void main(java.lang.String[])>
Processing: <T1: void main(java.lang.String[])>
invoke: i10 = staticinvoke <T1: int foo(int,int)>(i6, i8), #methods: 1
evaluating...
Soot finished on Tue Apr 23 21:33:49 IST 2024
Soot has run for 0 min. 17 sec.
T2.class
Soot started on Tue Apr 23 21:33:49 IST 2024
UDMS: 
	<T2: double foo(double,double)>
	<T2: void main(java.lang.String[])>
	<T1: int foo(int,int)>
	<T1: void main(java.lang.String[])>
r1 := @parameter0: java.lang.String[] usebox: class soot.jimple.ParameterRef
d3 = 1.0 usebox: class soot.jimple.DoubleConstant
d4 = 2.0 usebox: class soot.jimple.DoubleConstant
d5 = 3.0 usebox: class soot.jimple.DoubleConstant
d6 = d3 + 1.0 usebox: class soot.jimple.internal.JAddExpr
d6 = d3 + 1.0 usebox: class soot.jimple.DoubleConstant
$d0 = d4 * 2.0 usebox: class soot.jimple.internal.JMulExpr
$d0 = d4 * 2.0 usebox: class soot.jimple.DoubleConstant
d7 = $d0 * d6 usebox: class soot.jimple.internal.JMulExpr
$d1 = 1.0 * d5 usebox: class soot.jimple.internal.JMulExpr
$d1 = 1.0 * d5 usebox: class soot.jimple.DoubleConstant
$d2 = d5 + $d1 usebox: class soot.jimple.internal.JAddExpr
d8 = $d2 - 2.0 usebox: class soot.jimple.internal.JSubExpr
d8 = $d2 - 2.0 usebox: class soot.jimple.DoubleConstant
d9 = d6 + d8 usebox: class soot.jimple.internal.JAddExpr
d0 := @parameter0: double usebox: class soot.jimple.ParameterRef
d1 := @parameter1: double usebox: class soot.jimple.ParameterRef
d4 = d3 + 1.0 usebox: class soot.jimple.internal.JAddExpr
d4 = d3 + 1.0 usebox: class soot.jimple.DoubleConstant
$b0 = d4 cmpl d1 usebox: class soot.jimple.internal.JCmplExpr
if $b0 != 0 goto $d2 = d0 + d1 usebox: class soot.jimple.IntConstant
if $b0 != 0 goto $d2 = d0 + d1 usebox: class soot.jimple.internal.JNeExpr
d5 = d4 + 1.0 usebox: class soot.jimple.internal.JAddExpr
d5 = d4 + 1.0 usebox: class soot.jimple.DoubleConstant
$d2 = d0 + d1 usebox: class soot.jimple.internal.JAddExpr
d10 = staticinvoke <T2: double foo(double,double)>(d6, d8) usebox: class soot.jimple.internal.JStaticInvokeExpr
d11 = d10 + d9 usebox: class soot.jimple.internal.JAddExpr
d12 = d6 * d11 usebox: class soot.jimple.internal.JMulExpr
virtualinvoke $r0.<java.io.PrintStream: void println(double)>(d12) $r0, class soot.jimple.internal.JimpleLocal
virtualinvoke $r0.<java.io.PrintStream: void println(double)>(d12) usebox: class soot.jimple.internal.JVirtualInvokeExpr
impure methods: 
<T2: void main(java.lang.String[])>
<T1: void main(java.lang.String[])>
Processing: <T2: void main(java.lang.String[])>
invoke: d10 = staticinvoke <T2: double foo(double,double)>(d6, d8), #methods: 1
evaluating...
Soot finished on Tue Apr 23 21:34:02 IST 2024
Soot has run for 0 min. 13 sec.
T3.class
Soot started on Tue Apr 23 21:34:02 IST 2024
UDMS: 
	<T3: int factorial(int)>
	<T2: double foo(double,double)>
	<T3: void main(java.lang.String[])>
	<T2: void main(java.lang.String[])>
	<T1: int foo(int,int)>
	<T1: void main(java.lang.String[])>
r1 := @parameter0: java.lang.String[] usebox: class soot.jimple.ParameterRef
b0 = 5 usebox: class soot.jimple.IntConstant
i0 := @parameter0: int usebox: class soot.jimple.ParameterRef
if i0 != 0 goto $i1 = i0 - 1 usebox: class soot.jimple.IntConstant
if i0 != 0 goto $i1 = i0 - 1 usebox: class soot.jimple.internal.JNeExpr
return 1 usebox: class soot.jimple.IntConstant
$i1 = i0 - 1 usebox: class soot.jimple.internal.JSubExpr
$i1 = i0 - 1 usebox: class soot.jimple.IntConstant
$i2 = staticinvoke <T3: int factorial(int)>($i1) usebox: class soot.jimple.internal.JStaticInvokeExpr
$i3 = i0 * $i2 usebox: class soot.jimple.internal.JMulExpr
$i1 = staticinvoke <T3: int factorial(int)>(b0) usebox: class soot.jimple.internal.JStaticInvokeExpr
virtualinvoke $r0.<java.io.PrintStream: void println(int)>($i1) $r0, class soot.jimple.internal.JimpleLocal
virtualinvoke $r0.<java.io.PrintStream: void println(int)>($i1) usebox: class soot.jimple.internal.JVirtualInvokeExpr
impure methods: 
<T3: void main(java.lang.String[])>
<T2: void main(java.lang.String[])>
<T1: void main(java.lang.String[])>
Processing: <T3: void main(java.lang.String[])>
invoke: $i1 = staticinvoke <T3: int factorial(int)>(b0), #methods: 1
evaluating...
Soot finished on Tue Apr 23 21:34:16 IST 2024
Soot has run for 0 min. 13 sec.
T4.class
Soot started on Tue Apr 23 21:34:16 IST 2024
UDMS: 
	<T3: int factorial(int)>
	<T2: double foo(double,double)>
	<T4: int factorial(int)>
	<T4: void main(java.lang.String[])>
	<T3: void main(java.lang.String[])>
	<T2: void main(java.lang.String[])>
	<T1: int foo(int,int)>
	<T1: void main(java.lang.String[])>
	<T4: int factorial2(int)>
r1 := @parameter0: java.lang.String[] usebox: class soot.jimple.ParameterRef
b0 = 5 usebox: class soot.jimple.IntConstant
i0 := @parameter0: int usebox: class soot.jimple.ParameterRef
if i0 != 0 goto $i1 = i0 - 1 usebox: class soot.jimple.IntConstant
if i0 != 0 goto $i1 = i0 - 1 usebox: class soot.jimple.internal.JNeExpr
return 1 usebox: class soot.jimple.IntConstant
$i1 = i0 - 1 usebox: class soot.jimple.internal.JSubExpr
$i1 = i0 - 1 usebox: class soot.jimple.IntConstant
i0 := @parameter0: int usebox: class soot.jimple.ParameterRef
if i0 != 0 goto $i1 = i0 - 1 usebox: class soot.jimple.IntConstant
if i0 != 0 goto $i1 = i0 - 1 usebox: class soot.jimple.internal.JNeExpr
return 1 usebox: class soot.jimple.IntConstant
$i1 = i0 - 1 usebox: class soot.jimple.internal.JSubExpr
$i1 = i0 - 1 usebox: class soot.jimple.IntConstant
$i2 = staticinvoke <T4: int factorial(int)>($i1) usebox: class soot.jimple.internal.JStaticInvokeExpr
$i3 = i0 * $i2 usebox: class soot.jimple.internal.JMulExpr
$i2 = staticinvoke <T4: int factorial2(int)>($i1) usebox: class soot.jimple.internal.JStaticInvokeExpr
$i3 = i0 * $i2 usebox: class soot.jimple.internal.JMulExpr
$i1 = staticinvoke <T4: int factorial(int)>(b0) usebox: class soot.jimple.internal.JStaticInvokeExpr
virtualinvoke $r0.<java.io.PrintStream: void println(int)>($i1) $r0, class soot.jimple.internal.JimpleLocal
virtualinvoke $r0.<java.io.PrintStream: void println(int)>($i1) usebox: class soot.jimple.internal.JVirtualInvokeExpr
impure methods: 
<T4: void main(java.lang.String[])>
<T3: void main(java.lang.String[])>
<T2: void main(java.lang.String[])>
<T1: void main(java.lang.String[])>
Processing: <T4: void main(java.lang.String[])>
invoke: $i1 = staticinvoke <T4: int factorial(int)>(b0), #methods: 1
evaluating...
Soot finished on Tue Apr 23 21:34:27 IST 2024
Soot has run for 0 min. 10 sec.
T5.class
Soot started on Tue Apr 23 21:34:27 IST 2024
UDMS: 
	<T5: int factorial(int)>
	<T3: int factorial(int)>
	<T5: void main(java.lang.String[])>
	<T2: double foo(double,double)>
	<T4: int factorial(int)>
	<T4: void main(java.lang.String[])>
	<T3: void main(java.lang.String[])>
	<T2: void main(java.lang.String[])>
	<T1: int foo(int,int)>
	<T1: void main(java.lang.String[])>
	<T4: int factorial2(int)>
r1 := @parameter0: java.lang.String[] usebox: class soot.jimple.ParameterRef
b0 = 5 usebox: class soot.jimple.IntConstant
i0 := @parameter0: int usebox: class soot.jimple.ParameterRef
if i0 != 0 goto $r1 = <java.lang.System: java.io.PrintStream out> usebox: class soot.jimple.IntConstant
if i0 != 0 goto $r1 = <java.lang.System: java.io.PrintStream out> usebox: class soot.jimple.internal.JNeExpr
return 1 usebox: class soot.jimple.IntConstant
$r0 = new java.lang.StringBuilder usebox: class soot.jimple.internal.JNewExpr
specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() usebox: class soot.jimple.internal.JSpecialInvokeExpr
$r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("called with: ") $r0, class soot.jimple.internal.JimpleLocal
$r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("called with: ") usebox: class soot.jimple.internal.JVirtualInvokeExpr
$r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("called with: ") usebox: class soot.jimple.StringConstant
$r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0) $r2, class soot.jimple.internal.JimpleLocal
$r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0) usebox: class soot.jimple.internal.JVirtualInvokeExpr
$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>() $r3, class soot.jimple.internal.JimpleLocal
$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>() usebox: class soot.jimple.internal.JVirtualInvokeExpr
virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r4) $r1, class soot.jimple.internal.JimpleLocal
virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r4) usebox: class soot.jimple.internal.JVirtualInvokeExpr
$i1 = i0 - 1 usebox: class soot.jimple.internal.JSubExpr
$i1 = i0 - 1 usebox: class soot.jimple.IntConstant
$i2 = staticinvoke <T5: int factorial(int)>($i1) usebox: class soot.jimple.internal.JStaticInvokeExpr
$i3 = i0 * $i2 usebox: class soot.jimple.internal.JMulExpr
$i1 = staticinvoke <T5: int factorial(int)>(b0) usebox: class soot.jimple.internal.JStaticInvokeExpr
virtualinvoke $r0.<java.io.PrintStream: void println(int)>($i1) $r0, class soot.jimple.internal.JimpleLocal
virtualinvoke $r0.<java.io.PrintStream: void println(int)>($i1) usebox: class soot.jimple.internal.JVirtualInvokeExpr
impure methods: 
<T5: int factorial(int)>
<T5: void main(java.lang.String[])>
<T4: void main(java.lang.String[])>
<T3: void main(java.lang.String[])>
<T2: void main(java.lang.String[])>
<T1: void main(java.lang.String[])>
Processing: <T5: void main(java.lang.String[])>
invoke: $i1 = staticinvoke <T5: int factorial(int)>(b0), #methods: 1
Soot finished on Tue Apr 23 21:34:41 IST 2024
Soot has run for 0 min. 13 sec.
